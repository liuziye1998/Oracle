仓库 (repository)
跟踪（track）
暂存（stage）
提交（commit）
不同提交（commits）
推送（push）(上传)
拉取（pull）（下载）

$git init 该命令将创建一个名为.git.的子目录，这个子目录含有你初始化的git仓库中所有的必须文件，这些文件是git仓库的骨干
$git add 实现对指定文件的跟踪
$ git commit 提交文件
$ git clone [url(即目标的地址)] 此操作是克隆该仓库服务器上的几乎所有内容(每一个文件的每一个版本都会被拉取下来)
例：
$ git clone http://github.com/libgit2/libgit2
这会在当前目录下创建一个名为“libgit2”的目录，并在这个目录下初始化一个.git’
的文件夹从远程仓库拉取的所有数据放入.git文件夹，然后从中读取最新版本的文件进行拷贝，当你进入到libgit2文件夹时所有的项目文件都在里面了
$ git clone http://github.com/libgit2/libgit2 mylibgit
此命令可以在克隆远程仓库的时候，自定义本地仓库的名字 ，上例中本地仓库的名称为mylibgit 
# 下载仓库
git clone https://github.com/liuziye1998/blog.git

#  查看仓库地址
git remote -v

# 查看状态(包括add commit等的状态)
git status

# 撤销操作
git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 
git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了
git reset --hard HEAD 撤销最近一次的commit
# 编辑文件
vim README.md

# 添加到缓存区
git add README.md
git add .
git add --all

# 提交修改文件
git commit -m "add README.md"

# 本地仓库删除文件同步到远程仓库
git rm 文件名 （会生成一个操作名称）
git commit -m "(输入git rm后生成的名称)"
git push origin master


# 查看commit信息
git log

# 查看commit修改内容(commit_id 可以通过 git log 查看得到)
git show commit_id


# 提交修改到服务器
git push origin master

#将本地分支提交到远程服务器
git push origin 本地分支名称

# 查看所有分支
git branch -a

# 创建分支(分支名：develop)
git branch develop

# 切换分支
git checkout develop

# 创建并切换分支
git checkout -b develop

# 删除分支
git branch -D develop

# 更新分支信息
git fetch

# 更新服务器内容到本地
git pull origin master
# 更新服务器dev分支内容到本地master分支
git pull origin dev（服务器数据）:master（本地数据）



liu@LAPTOP-Q7FAHV0K MINGW64 /d/Develop/environment-handbook (master)
$ git remote add jiuchou https://github.com/jiuchou/environment-handbook.git

liu@LAPTOP-Q7FAHV0K MINGW64 /d/Develop/environment-handbook (master)
$ git remote -v
jiuchou https://github.com/jiuchou/environment-handbook.git (fetch)
jiuchou https://github.com/jiuchou/environment-handbook.git (push)
origin  https://github.com/liuziye1998/environment-handbook.git (fetch)
origin  https://github.com/liuziye1998/environment-handbook.git (push)




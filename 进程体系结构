进程简介:
	进程是在操作系统中可以运行一系列步骤的机制
	代码模块由进程来运行
	所有以连接的Oracle数据库用户必须运行以下模块来访问数据库实例
		1.应用程序或Oracle实用程序
			数据库用户运行一个数据库应用程序，如预编译器程序或数据库工具来向数据库发出SQL语句
		2.Oracle数据库代码
			每个数据库用户都有为其的Oracle数据库代码以解释和处理应用程序的SQL语句
	进程通常在其自己的私有内存区内运行，大多数进程可以定期写入一个关联的跟踪文件
	
进程类型：
	1.客户端进程：运行应用程序或Oracle工具代码
	2.Oracle进程：运行Oracle数据库代码
		Oracle进程分类：
			1.后台进程
				与数据库进程同时启动并执行一些维护任务，如：实例恢复，清理进程，将重做缓冲区写入磁盘
			2.服务器进程
				基于客户端请求，执行相应的工作，如:进程解析SQL查询，将查询放入共享池，为查询创建并执行查询计划，将数据从数据库缓冲区高速缓存读入缓存区
			3.从属进程
				为后台进程或服务器进程执行额外任务
    在一个共享服务器的体系结构中，每个运行数据库代码的额服务器进程可以为多个客户端进程服务 
	专用服务器中每个客户端进程都有其专用的服务器来运行数据库代码，每个服务器进程都有自己的程序全局区
	
	
多进程Oracle数据库系统
	
	概述：
		多进程Oracle（也称多用户Oracle）使用几个进程来运行Oracle数据库代码的不同部分，并为用户运行一些其他进程，要么每一个用户一个进程，要么多个用户共享
    一个或多个进程
	
	优势: 管理由多个用户所需的数据

客户端进程概述：
    当用户运行一个应用程序（如 Pro*C 程序或 SQL*Plus）时，操作系统会创建一个客户端进程 （有时称为 用户进程）来运行用户应用程序。客户端应用程序具有已链接
到进程的 Oracle 数据库库文件，以提供与数据库进行通信所需的 API。

客户端进程和服务器进程的区别
    1.Oracle进程可以读取或写入SGA，客户端进程则不行
    2.客户端进程可以在数据库主机之外的另一台主机运行，Oracle进程则不能

连接概述：
    连接是客户端进程和数据库实例之间的一条物理通信路径，通信路径使用可用的进程间通信机制或网络软件来建立，通常，连接在客户端进程和服务器进程（或调度器进程）
之间产生，也可在客户端进程和Oracle连接管理器之间产生

会话概述：
    会话是数据库实例内存中的一个逻辑实体，表示登陆到数据库的某个当前用户状态，如：当用户输入密码通过验证，会为此用户建立一个会话，会话的持续时间从通过验证开
始到断开用户连接或退出数据库应用程序

服务器进程
    概述:
        Oracle 数据库创建 服务器 进程，以处理连接到实例的客户端进程的请求。客户端进程总是通过单独的服务器进程与数据库进行通信。
    服务器进程可执行一个或多个下列任务
        1.解析并运行通过应用程序发出的 SQL 语句，包括创建和执行查询计划
        2.执行PL/SQL代码
        3.将数据块从数据文件读入数据库缓冲区高速缓存中（将已修改的块写回磁盘是DBWn后台进程的任务）
        4.返回结果信息，以便应用程序进一步处理
    专用服务器进程：
        概述：
            客户端连接且只与一个服务器进程连接，每个客户端进程直接与其服务器进程进行通信，且该服务器在会话期间专用于该客户端进程，服务器进程将特定于进程的
        信息和UGA存储在其PGA中
    共享服务器进程
        概述:
            客户端应用程序通过网络连接到一个调度器进程，而不是一个服务器进程，调度器进程接受来自已连接客户端的请求，并将他们放置在大池的请求队列中，第一个
        可用的共享服务器进程从队列承接一个请求并处理之。之后，共享服务器进程将结果放回调度器响应队列。调度器进程会监视此队列，并将结果传回客户端
        共享服务器也有自己的PGA，但是UGA位于SGA中以便任何共享服务器进程可以访问其中的会话数据

后台进程
    概述：
        多进程 Oracle 数据库会使用某些称为 后台进程的额外进程。后台进程执行操作数据库所需的维护任务，并最大化多用户性能。每个后台进程都有其单独的任务，但
    又与其他进程相互协作，数据库实例启动时，Oracle 数据库将自动创建后台进程
    分类：
        1.强制性后台进程
            概述：
                强制性后台进程存在于所有典型的数据库配置。默认情况下，这些进程运行在以一个最小化配置的初始化参数文件启动的数据库实例中
            分类：
                1.进程监视器进程(PMON)
                    概述：
                        监视其他的后台进程，并在某个服务器进程或调度器进程以尝终止时执行恢复进程，负责清理数据库缓冲区高速缓存，并释放客户端进程以前还在使
                    用的资源。将实例和调度器进程的信息注册到 Oracle 网络监听器当实例启动时， PMON轮询监听器以确定它是否正在运行。如果监听器正在运行，则 
                    PMON 将有关参数传递给它。如果监听器未运行，则 PMON 定期尝试联系它

                2.系统监视器进程(SMON)
                    概述：负责各种系统清理职责，主要职责包括以下
                        1.如有必要，在实例启动时执行实例恢复，在Oracle rac中一个数据库实例的 SMON 进程可以为另一个失败的实例执行实例恢复
                        2.在实例恢复期间，由于读文件或表空间脱机错误而跳过的已终止事务，由 SMON 进行恢复，当表空间或文件重新联机时，SMON 将恢复该事务。
                        3.清理未使用的临时段。例如， Oracle 数据库在创建索引时会分配扩展区。如果操作失败，则 SMON 会清理临时空间
                        4.合并在字典管理的表空间中的多个连续空闲扩展区
                    SMON 定期检查是否需要做什么。其他进程在发现需要做什么时，也可以调用 SMON 来做
                3.数据库写入器进程(DBWn)
                    概述：
                         将数据库缓冲区的内容写入到数据文件中。DBWn 进程将数据库缓存中被修改的缓冲区写入到磁盘中

                    在下列条件下会将脏缓冲区写入磁盘中
                        1.当服务器进程扫描了额定数目的缓冲区后，仍未找到干净的可重复使用的缓冲区时，它会通知 DBWn 执行写入操作。DBWn 尽可能以异步方式将脏
                    缓冲区写入到磁盘，以便同时能执行其他处理
                        2.DBWn 周期性地写出缓冲区，以推进检查点，该点是重做线程中实例恢复开始的位置
                    在许多情况下，DBWn 写入的块将遍布整个磁盘。因此，该写操作往往要比由 LGWR 执行的顺序写入速度慢。DBWn进程尽可能进行多块写入，以提高效率
                4.日志写入器进程(LGWR)
                    概述：  
                        管理重做日志缓冲区，LGWR 将缓冲区中的一个连续部分写入联机重做日志。通过分离各种修改数据库缓冲区任务，将脏缓冲区分散写入到磁盘，而
                    将重做缓冲区顺序写入到磁盘，提高了数据库性能。

                    以下情况下将缓冲区的所有重做条目写入联机重做日志
                        1.用户提交了事务
                        2.发生了在线重做日志切换
                        3.自LGWR最后一次写入到现在超过3秒
                        4.重做日志缓冲区达到三分之一满，或包含1MB以上的被缓冲的数据
                        5.DBMn必须将修改的缓冲区写入到磁盘
                    在 DBWn 可以将脏缓冲区写到磁盘之前，与该缓冲区更改相关联的重做记录必须先被写入磁盘 （ 预写协议）。如果 DBWn 发现一些重做记录尚未写入，
                    则它通知 LGWR 将记录写入磁盘，并等待 LGWR 完成此工作，然后DBWn 才将数据缓冲区写入磁盘

                    LGWR提交相关：
                        使用快速提交机制来提高已提交事务的性能，当用户发出commit指令时，LGWR会立即写入到磁盘，
                        重做日志缓冲区是循环的。当 LGWR 将重做条目从重做日志缓冲区写入到联机重做日志文件时，服务器进程可以复制新条目并覆盖已写入到磁盘的重
                    做日志缓冲区中的条目。
                        包含事务提交记录的重做条目的原子写入，是确定该事务已提交的唯一事件。Oracle 数据库向已提交事务返回一个成功代码，虽然数据缓冲区尚未写
                    入到磁盘。对数据块的相应更改被延迟，直到 DBWn 在某个有利的时机将它们写到数据文件
                        LGWR 可能会在提交事务之前，将重做日志条目写入到磁盘，当事务活动很高时， LGWR 可能会使用组提交
                    
                    LGWR与无法访问的文件:
                        如果组中的所有文件都损坏，或者如果因为尚未存档而不可用，则 LGWR 不能继续工作

                5.检查点进程(CKPT)
                    概述：
                        使用检查点信息更新控制文件和数据文件头，并通知DBWn 将块写入磁盘。检查点信息包括检查点位置、SCN、联机重做日志中的起始恢复位置等等。
                     CKPT 不会将数据块写入数据文件，也不会将重做块写入联机重做日志文件。

                6.可管理性监视进程(MMON和MMNL)
                     概述：执行许多与自动工作负载存储库（AWR)相关的任务。
                     分支：
                        可管理性监视器轻量 进程 （MMNL）将SGA 中的活动会话历史 (ASH) 缓冲区统计信息写入磁盘。当 ASH 缓冲区已满时，MMNL 将其写入到磁盘。

                7.恢复器进程(RECO)
                    概述：
                        在一个分布式数据库中，恢复器进程（RECO）会自动解决在分布式事务中的故障。一个节点的 RECO 进程会自动连接到可疑分布式事务中涉及的其他
                    数据库。当 RECO 数据库之间重新建立了连接后，它会自动解决所有可疑事务，从每个数据库事务表中删除任何与可疑事务对应的未决事务行。
        2.可选后台进程
            概述：即是未定义为强制性的后台进程。大多数可选后台进程是特定于任务或功能特性的。
            分类：
                1.归档器进程（ARCn）
                    概述：重做日志切换发生后，归档器进程（ARCn ）将联机重做日志文件复制到脱机存储。这些进程也可能会收集事务重做数据，并将其传送到备用数据库
                目标位置。仅当数据库处于归档模式下且启用了自动归档时，才存在 ARCn 进程

                2.作业队列进程（CJQ0和Jnnn）
                    概述：Oracle 数据库使用作业队列进程来运行用户作业，通常使用批处理模式。作业是一种用户定义的被计划运行一次或多次的任务。例如，您可以使用
                作业队列来计划一个在后台长时间运行的更新任务。给定一个开始日期和时间间隔，作业队列进程尝试在下一个间隔重新运行该作业

                    动态作业队列进程可能会在某个给定的时间间隔同时运行大量的作业，运行顺序如下:
                        1. Oracle 调度器根据需要会自动启动和停止作业协调器进程 (CJQ0)。协调器进程定期从系统表JOB$ 中选择需要运行的作业。被选出的新作业是按
                    时间排序的。
                        2. 协调器进程动态派生出作业队列从属进程(Jnnn) 来运行作业
                        3. 作业队列进程运行由 CJQ0 进程选出以备执行的某个作业。每个作业队列进程一次运行一个作业直至完成。
                        4. 在进程完成单个作业的执行后，它会轮询以运行更多工作。如果没有计划的作业可供执行，则它进入睡眠状态，且周期性地醒来再次轮询以运行更多
                    工作。如果该进程未找到任何新的作业，则它在一个预设的时间间隔后会终止
                        初始化参数 JOB_QUEUE_PROCESSES 表示在实例上可以同时运行的作业队列进程的最大数目,若被设置为 0，则不会启动协调器进程
                3.闪回数据归档器进程（FBDA）
                    概述：将跟踪表的历史行归档到闪回数据归档区。当跟踪表中包含DML的事务提交时，该进程将行的前像存储到闪回数据存档区。它也会保存当前行上的元
                数据。
                    FBDA 自动管理闪回数据存档的空间、 组织、和保留期等。此外，该进程会跟踪被跟踪的事务归档已发生了多久

                4.空间管理协调器进程（SMCO）
                    概述：SMCO 进程协调各种空间管理相关的任务，比如主动预防性的空间分配和空间回收。SMCO 动态生成从属进程（Wnnn）来执行此任务。

        3.从属进程
            概述：从属进程是为其他进程执行工作的后台进程
            分类：
                1.I/O从属进程（Innn）
                    概述：为不支持异步 I/O 的系统和设备模拟异步 I/O
                    数据库支持包括以下不同类型的 I/O 从属进程：
                    1.恢复管理器 (RMAN)的 I/O 从属进程
                        当使用 RMAN 备份或还原数据时，您可以为磁盘和磁带设备使用 I/O从属进程
                    2.数据库写入器从属进程
                        如果计算机只有一个 CPU，则数据库使用多个写入器进程并不现实，此时数据库可以通过多个从属进程来分布 I/O。DBWR 是扫描缓冲区高速缓存LRU
                    列表中的块以写入到磁盘的唯一进程。而 I/O 从属进程为这些块执行 I/O。

                2.并行查询从属进程
                    概述：在并行执行或并行处理中，多个进程同时协作，来运行一个单一SQL语句
                    优点：并行执行减少了在大型数据库（如数据仓库）上的数据密集型操作的响应时间对称多处理 (SMP) 和集群系统能从并行执行获得最大的性能优势，因
                为语句处理可以在多个 CPU 之间划分。并行执行也可以使某些类型的 OLTP和混合系统受益
                    在 Oracle RAC 系统中，由特定服务的服务配置控制并行执行。具体而言，并行进程在已配置服务的多个节点上运行。默认情况下，Oracle 数据库只
                在提供数据库连接服务的实例上运行并行进程。这并不影响其他并行操作，如并行恢复或对 GV$ 查询的处理

                    串行执行：在串行执行中，由单个服务器进程，执行顺序执行的某个SQL语句的所有必要处理。例如，执行一个全表扫描（如SELECT*FROMemployees），
                由一个服务器进程执行所有的工作

                    并行执行：在并行执行中，服务器进程作为并行执行协调器，负责解析查询、分配和控制从属进程、并将输出发送给用户。给定一个SQL查询的查询计划，
                协调器将SQL查询中的每个运算符分解成一些平行的片断、并按查询中指定的顺序运行它们，最后又将这些执行各个操作的从属进程所产生的部分结果集成起来
                    例：在employees表上的并行扫描。表被动态划分（动态分区）成多个称为颗粒的加载单元。每个颗粒是一个由单个从属进程读取的数据块范围，这些从属
                进程叫做并行执行服务器，其名称格式为Pnnn。数据库在执行时将颗粒映射到执行服务器。当一个执行服务器完成对某个颗粒对应行的读取，而此时还有其它颗
                粒要读取时，该执行服务器从协调器获取另一个颗粒。此操作将继续，直到读取完整个表。执行服务器向协调器发送执行结果，协调器再将这些片断合并成最终
                所需的全表扫描结果
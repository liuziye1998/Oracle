表
创建表
    create table 表名;
删除表
    drop table 表名;删除表，彻底删除表
    truncate table 表名;清空表中的所有数据,如果有自增字段的表，自增字段从头开始计数
    delete from 表名；清空表中的所有数据，如果有自增字段的表，自增字段从删除前的最大数开始计数
修改表名
    rename 旧表名 to 新表名
向表中增加列数据
    alter table 表名 add 列名 数据类型 约束类型等
从表中删除列数据
    alter table 表名 drop 列名；
修改列的类型
    alter table 表名 modify(列名 数据类型 约束类型等)
修改列的值(不加where则修改整个列的值)
    update 表名 set 列名1=值1,列名2=值2 where ...
删除某列信息
    delete from 表名 where ...
修改列的名称
    alter table 表名 rename column 旧列名 to 新列名
查看当前用户的所有表
    select table_name from user_tables;


语句类型
DDL database define language
数据定义语言
例如：
    create table：创建数据库表
    create index：创建数据库表的索引
    drop table：删除数据库表
    drop index：删除数据库表的索引
    truncate：删除表中的所有行
    alter table：更改表结构，增加，删除，修改列
    alter table add constraint：在以有的表上增加约束

DML database make language
数据操作语言
例如
    insert：添加数据到数据库
    update：修改数据库中的数据
    delete：删除数据库中的数据
    select：选择（查询）数据

DCL database control language 
数据控制语言
例如
    grant：将权限或角色授权给用户或角色
    revoke：从用户或角色回收权限
    lock：对数据库特定的部分进行锁定

TCL
事务控制语言
例如
    commit：提交事务处理
    rollback：事务处理回退
    savepoint：设置保存点



数据类型
字符型
    char：固定长度的字符串，列长度为1-2000个字节
    varchar2：可变长度的字符串，最大长度为4000字节
数值类型
    声明语法
        number[(p[,s])]
        p表示精度（即这个数据的有效位数），s表示小数点的位数，可存储整数，浮点数等数值类型，最高精度为38位
        number(5,0)最对可存储五位整数
        number(5,2)存储的最大数值为999.99
日期类型
    date
    oracle中如何插入date类型的数据方法如下：
        insert into tabname(datecol) value(sysdate) ;  -- 用date值
        insert into tabname(datecol) value(sysdate+1) ;  -- 用date值
        insert into tabname(datecol) value(to_date('2014-02-14','yyyy-mm-dd')) ;  -- 用to_date
        insert into tabname(datecol) value(to_date('2014-02-14 20:47:00','yyyy-mm-dd hh24:mi:ss')) ;  -- 用to_date
        insert into tabname(datecol) value(to_date('20140214','yyyymmdd')) ;  -- 用to_date
        insert into tabname(datecol) value(to_date('20140214204700','yyyymmddhh24miss')) ;  -- 用to_date
LOB类型
    CLOB：能够存储大量字符数据
    BLOB：可以存储较大的二进制对象，如图像，视频和声音等；

空值 null
    NVL空值转换函数,使空值可以进行运算，格式如下
        NVL(expr1,expr2)，如果expr1为空值，则返回expr2的值，否则返回expr2的值，表达式expr1和expr2的数据类型必须相同，可以为数字类型，
        字符类型和日期类型 
    NVL2是NVL的增强，格式为
        NVL(expr1,expr2,expr3),若expr1为空值，则返回expr3的值，若expr1不为空，则返回exper2的值，其中expr1可以为任意数据类型，expr2，3
        为除long数据类型以外的任意数据类型
    NULLIF函数，比较两个表达式
        NULLIF(expr1，expr2)，若expr1和expr2值相等则返回空值null，若不相等则返回expr1的值，
    COALESCE函数，返回该函数中第一个不为null的表达式的值
        COALESCE(expr1,expr2,...exprn)
        

分组函数：
    group by (列名)，依据某个列进行分组
    having 对分组函数进行限制
        select max(avg(列名)) min(avg(列名)) from 表  having 条件表达式 group by 列名;
    分组后对表中的多个行进行操作
        AVG：计算某列中某组分组后，每组的平均值用于计算数字类型
            select AVG(列名) "别名/临时名称(可以不命名)" from 表;
        SUM：计算某列中某组分组后，每组的和值用于计算数字类型
            select SUM(列名) "别名/临时名称(可以不命名)" from 表;
        MAX：计算最大值，可操作数字型，字符型和日期型数据
            select MAX(列名) "别名/临时名称(可以不命名)" from 表;
        MIN：计算最小值，可操作数字型，字符型和日期型数据
            select MIN(列名) "别名/临时名称(可以不命名)" from 表;
        COUNT：行计数
            返回进过计算后返回的行数，包括空行和重复行
            select count(列名) "别名/临时名称(可以不命名)" from 表;
            使用包含distinct的count函数，去重复的行数据之后计数
            select count(distinct 列名) "别名/临时名称(可以不命名)" from 表;
        嵌套使用：
            select max(avg(列名)) min(avg(列名)) from 表 group by 列名;



约束
自动保持数据库完整性的一种方法，通过限制字段中的数据，记录中的数据和表之间的数据来保持数据的完整性
完整性约束的基本语法格式
constraint 约束名 约束类型
表级约束：可以不与列一起，单独定义
列级约束：必须跟在列的定义后面

    主键约束：primary key constriant  表级约束
    唯一性约束：unique constraint
        指定一个或者多个列的值具有唯一性，以防止列中出现重复的值
        一个表中允许多个唯一性约束存在
        使用唯一性约束的列允许为空值
        可以把唯一性约束定义在多个列中，需要使用表级约束定义 
    默认约束：default constraint 
    非空约束：not null constraint    只能是列级约束
    检查约束：check constraint 
        对输入列或者整个表中的值设置检查条件，以限制输入值，保证数据库的完整性
        列级约束添加方法
            在列的最后添加 check(列名=限制条件1 or 列名=限制条件2 )
             例如 check(sex='男' or sex='女')，限制性别列的值只能为男或者女
        表级约束添加方法
            alter table 表名 add constraint 约束名（自定义） check(sex='男' or sex='女')；
    外部键约束：foreign key constraint
        用于建立和加强两个表数据之间的链接的一列或多列，外键约束是唯一涉及两个表关系的约束
        注意：设置外键约束时主表的字段必须是主键列（或唯一列），主表和子表的相应字段必须是同一类型，子表中外键字段的值必须
            来自主表相应字段的值或者为null值

        创建表时添加外键约束   
        列级约束
            create 子表 列名 references 主表 列名 (on delete cascade) 级联删除(删除主表时附带子表一起删除)
            例如
                先创建主表 department
                create table department(
                    depid varchar2(10) primary key,
                    depename varchar2(30)
                );
                创建字表 student
                create table student(
                    sid number(8,0),
                    name varchar2(20),
                    ser char(2),
                    birthday date,
                    address varchar2(50),
                    depid varchar2(10) references department(depid)
                );
        表级约束
            constraint 约束名 foreign key(子表列名) references 主表列名 （on delete cascade）
            例如
                先创建主表 department
                create table department(
                    depid varchar2(10) primary key,
                    depename varchar2(30)
                );
                创建字表 student
                create table student(
                    sid number(8,0),
                    name varchar2(20),
                    ser char(2),
                    birthday date,
                    address varchar2(50),
                    depid varchar2(10),
                    constraint 约束名 foreign key(depid) references department(depid) on delete cascade
                ); 
        修改表时创建外键约束
            alter table student add constraint 约束名 foreign key(depid) references department(depid) on delete cascade;


在已有的表中添加约束（表级约束）
    alter table 表名 add constraint id_key(约束名自定义) primary key(列名);
    检查约束：alter table 表名 add constraint 约束名（自定义） check(sex='男' or sex='女')；
    添加非空约束要用modify语句 
        alter table 表名 modify (列名称 not null)
在创建表时添加约束（表级约束）
    constraint 约束名（自定义） 约束类型(列名)；
在创建表时添加约束（列级约束）
    在一列的最后加上约束类型，约束名（可不加）

禁用约束
    disable constraint 约束名
    alter table 表名 disable constraint 约束名;
启用约束
    enable constraint 约束名
删除约束
    drop constraint 约束名
    删除主键的特殊方法
    drop primary key;
    删除非空约束的特殊方法
    alter table  表名 modify 列名 null;(修改为空值)



数据字典
    Oracle存放有关数据库信息的地方，用来描述数据，数据库数据字典是一组表和视图结构
        数据字典中的表不能直接被访问，但可以访问数据字典中的视图

    user_*(以user_开头，下同) 该视图存储了关于当前用户所拥有的对象的信息
        常用字典及其含义
            user_users：关于用户信息
            user_tablespaces：关于表空间信息
            user_tables：关于数据库表信息
            user_view：关于视图信息
            user_sequences：关于用户序列信息
            user_constraints：关于用户表的约束信息
            user_tiggers：关于触发器信息
            user_source：关于用户存储过程信息

        select * from user_users;查看当前用户下的信息

    all_* 该视图存储了当前用户能够访问的对象的信息（与user_*相比all_*不需要拥有该对象，只需要具有访问该对象的权限即可）
        select * from all_users;查看当前用户有权访问的所有的用户信息

    dba_* 该视图存储了数据库中所有对象的信息(前提是当前用户具有访问这些数据库的权限)
        select * from dba_users; 查看数据库所有用户的用户信息

select查询
    distinct：去重
        select 列名1，列名2，…… from 表名；出去重复的行

    日期列
        日期列默认的显示格式为dd(日)-mon(月)-rr(年的后两位)
        rr模式指定年份注意事项
            指定日期    当前年份                格式说明                      结果年份
            18-1-19    2019         指定年份在0-49之间,当前年份在0-49之间       2019
            18-1-19    2050         指定年份在0-49之间,当前年份在50-99之间      2119
            18-1-81    2019         指定年份在50-99之间,当前年份在0-49之间      1981
            18-1-80    2050         指定年份在50-99之间,当前年份在50-99之间     2080

    以简体中文显示日期，将会话的NLS_LANGUAGE参数设为SIMPLIFIED CHINESE;
        alter session  set nls-language='SIMPLIFIED CHINESE';
    以英语显示日期
        alter session set nls_language='american';
    以特定格式显示日期
        alter session set nls_date_format='yyyy/mm/dd';

    算术运算符：可用在数字和日期列上


连表查询（内连接）
    Oracle特有的内连接方式 select emp.empno,emp.ename,emp_temp.job from emp,emp_temp where emp.empno=emp_temp.empno;
    join on 方式 select emp.empno,emp.ename,emp_temp.job from emp join emp_temp on (emp.empno=emp_temp.empno);
        (括号里表示筛选条件)
    join using 方式 select empno,emp.ename,emp_temp.job from emp join emp_temp on (empno);
        (括号内的筛选条件只能为列名，且该列出现在前方的查询列中，则该列前不能带上表名或者表的别名)
    natural join：select emp.empno,emp.ename,emp_temp.job from emp natural join emp_temp;
        此方法仅限两个表的列同名且含义上完全一致 

连表查询（外连接）查询的结果除了包含符合连接条件的结果以外，还会包含驱动表中所有不满足连接条件的记录，若共有列为id，驱动表中id为
1，2，3，4，5 列name为a,b,c,d,e 被驱动表中的id为1，2，3，4 列name1为a,b,c,d,则返回结果中会   多出一行以上的信息
  左连接  左边表为驱动表
    查询的结果除了包含符合连接条件的结果以外，还会包含驱动表中所有不满足连接条件的记录，若共有列为id，驱动表中id为
       1，2，3，4，5 列name为a,b,c,d,e 被驱动表中的id为1，2，3，4 列name1为a,b,c,d,则返回结果中会   多出一行以上的信息
    目标表1 left outer join 目标表2 on (连接条件) 左边表为驱动表
    目标表1 left outer join 目标表2 using (连接列集合)
  右连接  右边表为驱动表
    查询的结果除了包含符合连接条件的结果以外，还会包含驱动表中所有不满足连接条件的记录，若共有列为id，驱动表中id为
       1，2，3，4，5 列name为a,b,c,d,e 被驱动表中的id为1，2，3，4 列name1为a,b,c,d,则返回结果中会   多出一行以上的信息
    目标表1 right outer join 目标表2 on (连接条件)    
    目标表1 right outer join 目标表2 using (连接列集合)    
  全连接 先做左连接在做右连接  除了显示满足条件的记录外 还显示两个表中不满足条件的数据
    目标表1 full outer join 目标表2 on (连接条件)    
    目标表1 full outer join 目标表2 using (连接列集合)    

    外连接时若加入限制条件，将限制条件和连接条件写在一起时，该条件会在连接之前执行（先筛选后执行），若在条件之后另起一行，则会在连接
    查询之后执行限制条件（先执行后筛选）

表连接的方法
    1. 排序合并连接
    2. 嵌套循环连接
    3. 哈希连接
    4. 笛卡尔连接
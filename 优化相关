latch 闩相关概念
    kcbgtcr是Oracle rdbms中重要的获取一致性读的函数，其含义为Kernal Cache Buffer GeT Cosistents Read，显然该函数存在两种获取
cache buffers chains的方式即kslbegin shared和excl。与之相对应的是kcbgcur: kslbegin，kcbgcur的含义为Kernel Cache Buffer Get Current，
该函数用以获取当前块以便修改，也就是"写"；很显然kcbgcur: kslbegin函数只有以excl排他方式持有child cache buffers chains latch的必要)，
原因在于虽然是查询语句但同样需要修改buffer header结构，譬如修改tch抢手度、holder list的hash变量us_nxt、us_prv以及waiter list的hash
变量wa_prv、wa_nxt等。换而言之读读是会引起Latch free:cache buffers chains等待的，而非许多人认为的仅有读写、写写会导致缓存链闩争用。

enqueue：是Oracle中另一种类型的锁，不像latch那么轻量，比latch要重，持有方式遵循先进先出，并且持有不具备原子性，因此持有enqueue往往需要先持有具备原子性的latch
用latch来保护enqueue的持有

pin锁：用来确保数据的一致性

逻辑读详解
    我们都知道,数据块是oracle最基本的读写单位,但用户所需要的数据,并不是整个块,而是块中的行,或列.当用户发出SQL语句时,此语句被解析执行完毕，
就开始了数据的抓取阶段,在此阶段,服务器进程会先将行所在的数据块从数据文件中读入buffer cache,这个过程叫做物理读.物理读,每读取一个块,就算一次
物理读.当块被送进buffer cache后,并不能立即将块传给用户,因为用户所需要的并不是整个块,而是块中的行.从buffer cache的块中读取行的过程,就是逻辑
读.为了完成一次逻辑读,服务器进程先要在hash表中查找块所在的buffer cache 链.找到之后,需要在这个链上加一个cache buffer chains 闩,加闩成功之后,
就在这个链中寻找指定的块,并在块上加一个pin锁.并释放cache buffer chains闩.然后就可以访问块中的行了.服务器进程不会将块中所有满足条件的行一次取
出,而是根据你的抓取命令,每次取一定数量的行.这些行取出之后,会经由PGA传给客户端用户.行一旦从buffer cache中取出,会话要释放掉在块上所加的PIN.
本次逻辑读就算结束.如果还要再抓取块中剩余的行,服务器进程要再次申请获得cache bufffer链闩.再次在块上加PIN.这就算是另外一次逻辑读咯.也就是说,
服务器进程每申请一次cache buffer链闩,就是一次逻辑读.而每次逻辑读所读取的行的数量,可以在抓取命令中进行设置.
     逻辑读和Cache buffer chains闩关系密切，TOM曾有文章提到，进程每申请一次Cache buffer chains闩，就是一次逻辑读。但是，逻辑读并不等同
于Cache buffer chains闩，每次逻辑读，在9i中至少需要获得两Cache buffer chains闩。逻辑读是指在Hash表中定位块的这个过程。

DB TIME=DB Wait time + DB CPU time  
根据awr报告分析DB time
  查看头部相关参数
    elapsed:表示自然流逝的时间
    DB time：表示数据库调用花费的时间
  查看load profile 相关参数 
    DB time(s):每自然秒，DB time 对应为多少秒
    DB cpu(s): 每自然秒，CPU 对应的消耗时间
      设db time为43.1秒  db cpu 为0.1秒 elapsed为10分钟
      可推算出db time总耗时为43.1*60*10/60=431分钟
             db cpu总耗时为0.1*60*10/60=1分钟
             db wait time=431-1=430分钟
      验算
        通过查看top5事件中的首要事件的time  dbtime百分比  avg wait三个参数进行验算
        avg wait与db time - db cpu 的值接近   time / dbtime 与dbtime百分比的值接近

set autotrace 
    SET AUTOTRACE OFF ---------------- 不生成AUTOTRACE 报告，这是缺省模式
    SET AUTOTRACE traceonly EXPLAIN ------ AUTOTRACE只显示SQL的执行计划
    SET AUTOTRACE traceonly STATISTICS -- 只显示执行结果的数量和资源消耗（统计信息）
    SET AUTOTRACE ON ----------------- 包含执行计划和统计信息，执行结果数量
    SET AUTOTRACE TRACEONLY ------ 只显示SQL执行结果的数量，执行计划和资源消耗（统计信息）
        Statistics
        ----------------------------------------------------------
        1728  recursive calls
            0  db block gets  从buffer cache中读取的block的数量
        600161  consistent gets  逻辑读次数 从buffer cache中读取的undo数据的block的数量
            0  physical reads  物理读次数 从磁盘读取的block的数量
            0  redo size  DML生成的redo的大小
            673  bytes sent via SQL*Net to client
            492  bytes received via SQL*Net from client
            2  SQL*Net roundtrips to/from client
            42  sorts (memory)  在内存执行的排序量
            0  sorts (disk)  在磁盘上执行的排序量
            1  rows processed  sql语句处理或返回了多少行，能直观的看出来，这个sql能不能优化。

优化器分类：RBO和CBO
    相同点：首先解析有索引的列值，一致性索引的逻辑读次数始终会比非一致性索引的次数少一次，连表查询时，from右边的表为主表，左边的
        附表

    索引全扫描的条件之一：目标索引列的属性是not null 


查询某表的最后一次统计信息
    select table_name,blocks,num_rows（记录数）,to_char(last_analyed,'yyyymmdd hh24:mi:ss') from dba_tables where table_name='';

查询某表的真实记录数信息
    select count(*) from 用户名.表名

查询某表的索引情况
    select index_name,column_name,column_position from dba_ind_columns where table_name ='表名'；

对某表收集统计信息
    exec dbms_stats.gather_table_stats(ownname=>'用户名',tabname=>'表名',cascade=>true,no_invaliadate=>false,degree=>4);
    exec dbms_stats.gether_table_stats(ownname=>'用户名',tabname=>'表名',method_opt=>'for all columns size 1',cascade=>ture);
查询系统级别optimizer_mode的值
    select name,value from V$parmeter where name='optimizer_mode';

查询会话级别optimizer_mode的值
    oradebug setospid <process ID>
    oradebug unlimit
    oradebug dump processstate 10
    oradebug tracefile_name
    从产生的trace文件中查看

设置系统级别optimizer_mode的值
    alter system set optimizer_mode=xxx

设置会话级别optimizer_mode的值
    alter session set optimizer_mode=xxx

查看执行计划的方式
    1. explain plan
    2. dbms_xplan包
    3. sqlplus 的autotrace 
    4. 10046事件
    5. 10053事件
    6. awr报告或者statspack报告
    7. 一些脚本，如display_cursor_9i.sql等
    (DML语言中select可能只是解析而未被执行)

    explain plan语法详细
        explain plan for SQL语句 ;
        select * from table(dbms_xplan.display)

    dbms_xplan包的用法
        select * from table(dbms_xplan.display)
        select * from table(dbms_xplan.display_cursor(null,null,'advanced'))作用于刚刚执行的SQL语句 
        select * from table(dbms_xplan.display_cursor('sql_id/hash_value',child_cursor_number(即游标中的解析树编号),'advanced'))根据sql_id/hash_value和
            根据sql_id/hash_value和child_cursor_number查看执行计划   作用域仅限SQL所在的child_cursor还存在于shared pool中
        select * from table(dbms_xplan.display_awr('sql_id"))根据SQL id查看其历史的执行计划，无法查询到执行步骤相对应的谓词条件

    10046事件
        1. 当前会话中激活10046事件
        2. 当前会话中执行目标SQL语句
        3. 关闭10046事件
        Oracle会将目标SQL的执行计划和资源消耗写入当前会话所对应的trace文件中，此文件的命名格式为‘实例名_ora_当前会话的spid.trc';此文件将保存在user_dump_dest
        所代表的目录下生成，其生成的是裸文件，使用tkprof命令翻译裸文件

        激活方法
            1. alter session set events '10046 trace name context forever,level 12';
            2. oradebug event 10046 trace name context forever,level 12;
        关闭方法
            1. alter session set events '10046 trace name context off;
            2. oradebug event 10046 trace name context off;

如何查看执行计划
    从最开头一直连续往右看，直到看见并列的位置，对于不并列的，靠右的先执行，对于并列的从上往下看，上面的先执行

执行计划 
    与表访问相关的执行计划
        全表扫描在执行计划中对应的关键字是table access full 
        rowid扫描对应的执行计划的关键字为table access by user rowid 或table access by index rowid (取决于SQL计划的关键字和目标表中是否有索引)

    与B树索引相关的执行计划（列值不能为空值 not null）
        索引唯一性扫描对应关键字为index unique scan
            近适用于where条件中是等值查询的SQL语句，其返回结果至多只有一条
        索引范围扫描对应关键字为index range scan
            目标SQL语句中where条件有一定的查询范围如between <  > >= <=等，同等搜索条件下范围扫描至少会比唯一性扫描的逻辑读次数多一次
        索引全扫描对应关键字为index full scan
            按照顺序依次对索引进行扫描，该方法既能对扫描结果达到排序的效果，又能同时避免对该索引值列真正的排序
        索引快速全扫描对应关键字为index fast full scan
            此方法只适用于CBO，可使用多块读，也可以并行执行，返回的结果不一定是有序的
        索引跳跃式扫描对应关键字为index skip scan
            此方法适用于where条件中没有对索引所在前导列指定条件，而对索引其他列指定条件时，，此方法适用于所有的复合索引

    与位图索引相关的执行计划
        创建位图索引关键字 create bitmap 索引名 on 表名(列名)
        优势：
            1. 被索引的列的distinct值较少，位图索引更节省存储空间
            2. 在多个列上创建索引，同等条件下更节省存储空间
            3. 快速处理一些包含各种and或or的条件查询的事情了
        适用条件
            1. 数据相同量大，相同量占总量比例高

        位图索引单键值扫描 bitmap index single value   
        位图索引范围扫描 bitmap index range scan
        位图索引全扫描 bitmap index full scan
        位图索引快速全扫描 bitmap index fast full scan
        位图按位与 bitmap and 
        位图按位或 bitmap or
        位图按位减 bitmap minus

    与表连接相关的执行计划
        排序合并连接对应的关键字是sort join和merge join
        嵌套循环连接对应的关键字是 nested loops
        哈希连接对应的关键字是 hash join 
            哈希半连接 hash join semi
        与反连接所对应的关键字是anti 连接方法不同对应的关键字可分为sort join anti, merge join anti, nested loops anti
        与半连接所对应的关键字是semi 连接方法不同对应的关键字可分为sort join semi, merge join semi, nested loops semi
            半连接会对连接结果进行必要的去重，即对表执行半连接的查询计划时会自动对查询结果进行必要的去重

    其他执行计划
        and-equal又称index merge,指如果where条件里出现了多个针对不同列的等值条件，且这些列上都有单键值的索引，则Oracle会以相应的单个
    等值条件去分别扫描这些索引，然后合并这些单个索引所得到的rowid集合，在从这些集合中筛选值相同的rowid再用筛选过的这些rowid回表得到目标
    SQL的最终执行结果
        and_equal对应关键字为and_equal

        index join 
        对应关键字为index join 

        视图合并view
        对应关键字为view
            如果能做视图合并SQL计划里不一定会出现view关键字，若不能做视图合并SQL计划里一定会出现view关键字，主要看谓词信息(prediacte 
        information)里面提示的内容

        filter过滤是一种改良的嵌套循环连接
        
        sort排序，通常以组合方式出现，比如下列几种
            1. sort aggreate 不一定进行排序
            2. sort unique              是否进行排序主要看统计信息中sorts(memory)和sorts(disk),上同，下同
            3. sort join 
            4. sort group by 
            5. sort order by 
            6. buffer sort 不一定进行排序 /验证是否排序，需要根据目标SQL真实执行计划中的#key值来确定，若值大于0则进行了排序

        union/union all 联合查询
            union：以并集的方式将连个表合并，且做好去重和排序
            union all：以并集的方式将表合并，不会进行去重和排序

        concat
            concat就是in_list扩展或or扩展
            执行计划中对应的关键字是concatenation
            in-list iterator  in-list迭代执行计划中对应的关键字为 inlist iterator

        层次查询(hierarchical queries)
            connect by 


稳定执行计划
    使用SPM 或者SQL profile来稳定执行计划

    SQL profile直译为SQL 概要  （被动执行）
    目的：
        1. 稳定执行计划
        2. 在不能修改目标SQL的SQL文本的情况下使目标SQL语句按指定的执行计划执行
    分类：
        automatic类型
            可以在不更改目标SQL的情况下更改其执行计划
        manual类型
            可以在不更改目标SQL的情况下更改其执行计划，同时可以很好的稳定目标SQL的执行计划
    
    SPM SQL PLAN Management  (主动稳定执行计划，且可以持续更新计划)
        启用后每一个SQL都会存在对应的SQL plan baseline，若有多个执行计划就有多个SQL plan baseline ，
        dba_sql_plan_baselines中列enabled和accepted用来判断SQL plan baseline所对应的执行计划能否被使用
        若enabled accepted的值均为yes则对应的SQL plan baseline的执行计划才能被启用，若有多个值为yes的SQL plan baseline则Oracle
        会从中选择成本值最小的执行计划来执行该SQL语句

        启用方式
            自动捕获： 
                optimizer_capture_sql_plan_baselines此参数用于控制是否开启自动捕获SQL plan baseline，默认为false,不捕获
                    将其值设为true之后Oracle会对此参数影响的范围内所有重复执行的SQL自动捕获SQL plan baseline，且第一次捕获的SQL
                    值均为yes
                optimizer_use_sql_plan_baselines此参数用于控制是否启用SMP ，默认值为true启用，此参数可以在会话和系统
                    级别修改
        更新执行计划可将要执行计划的enabled和accepted的值设为yes，将正在执行的计划中的值设为no即可


查看当前session的session id 
    select sid from V$mystat where rownum<2;
查看当前session id对应的session address 
    select saddr from V$session where sid=144;
查看当前session address产生的transaction总数
    select count(*) from V$transaction where ses_addr='';
查看当前session产生的transaction锁住的对象总数
    select count(*) from V$locked_object;
查看当前transaction 锁住的对象的object id
    select object_id from V$locked_object;
查看object id所对应的对象信息
    select owner,object_name from dba_objects where object_id=xxx;

清空共享池
    alter system flush shared_pool;


库缓存（library cache）：是共享池中的一块内存区域，主要作用是缓存刚刚执行过的SQL语句和pl/sql语句所对应的执行计划、解析树、pcode、
mcode等对象，当同样的语句再次被执行的时候，就可以利用已经缓存在库缓存的相关对象，无需从头开始，提高了语句在重复执行时的效率
    整个库缓存可以看作是由一组hash bucket所组成，每一个hash bucket都对应不同的哈希值，对单个hash bucket而言，其存储的就是哈希值相同的所有库缓存对象句柄
  同一个hash bucket中不同的库缓存对象句柄之间用指针联系起来，同一个hash bucket中不同的库缓存对象句柄之间组成了一个库缓存对象句柄链表
    库缓存对象library cache object：所有的库缓存对象都是以库缓存对象句柄的结构存储在库缓存中，Oracle通过访问相关的库缓存对象句柄
  来访问对应的库缓存对象
    库缓存对象句柄library cache object handle：以哈希表的方式存储在库缓存中，Oracle通过相关的哈希运算存储访问对应的库缓存对象句柄
        常用属性介绍
            name：表示库缓存对象句柄对应的库缓存对象的名称，若是SQL语句对应的库缓存对象句柄，则name的值就是该SQL的SQL文本
                若是表对应的库缓存对象句柄，则那name的值就是该表的表名
            namespace：表示库缓存对象句柄对应的库缓存对象所在的分组名，不同类型的库缓存对象所对应的库缓存对象句柄的namespace值
                可能相同
    库缓存对象句柄链表library cache object handles：
    data heap是库缓存中一块连续的内存区域，由Oracle动态分配，大小不是固定不变的，一个库缓存对象有多个data heap，但每个data heap之间是独立的，没有关联关系


cursor游标
    游标分类
        shared cursor：指缓存在库缓存里的SQL语句和匿名PL/SQL语句所对应的库缓存对象，对应库缓存对象句柄的namespace值为crsr,存储于SGA的库缓存里
        shared cursor是共享的，任意会话，用户都可以访问
            分类：
                parent cursor父游标：目标SQL的SQL文本会存储在其对应的库缓存对象句柄的属性name中，
                child cursor 子游标：目标SQL的解析树和执行计划存储在其对应的库缓存对象句柄的heap6中
            Oracle数据库里，任意一个目标SQL一定会同时对应两个shared cursor，分别为parent cursor和child cursor,其中parent cursor存储该SQL的SQL文本信息
          child cursor存储该SQL的解析树和执行计划，这种双游标的方式可以有效降低对应hash bucket中库缓存对象句柄链表的长度
            通过V$sqlarea视图可以查询到目标SQL的游标数，列version_count的值表示某个parent cursor所拥有的child cursor的数量
                select sql_id,version_count from V$sqlarea where ....;
            通过V$SQL视图查询目标SQL的所有child cursur，列child_number对应的就是详细信息
                select plan_hash_value,child_number from V$sql where sql_id='xxxx';
            通过V$SQL视图查询目标SQL的parent cursor的库缓存对象句柄地址
                select plan_hash_value,child_number,address from V$sql where sql_id='xxxx';
            通过V$SQL视图查询根据SQL_id查询改SQL的child cursor的执行计划plan_hash_value，执行次数executions，逻辑读次数buffer_gets
                select child_number,executions,buffer_gets,plan_hash_value from V$sql where sql_id='xxx';
    
        session cursor 用于当前session中解析和执行SQL，存储在PGA中
            与shared cursor的区别
                1. session cursor与session是一一对应的，不同session之间的session cursor之间无法共享
                2. session cursor是有生命周期的，其在使用过程中至少会经历一次open,parse,bind,execute,fetch和close中的一个或多个，当其被使用后是否会缓存
              在相应session的PGA中，有参数session_cached_cursors的值是否大于0决定
                    若参数session_cached_cursors的值等于0，那么session_cursor就会正常执行close操作。
                    若在当前的session的PGA中找不到匹配的缓存session cursor，但在库缓存中找到了匹配的parent/child cursor，则Oracle会新建一个session cursor
                  并重用刚刚匹配到的parent/child parent,此过程为软解析
                3. 以哈希表的方式缓存在PGA中，其执行机制和shared cursor一致：先根据目标SQL的SQL文本的哈希值去PGA中相应的hash bucket中找匹配session cursor
              若匹配不到，Oracle会新生成一个session cursor和一对shared cursor(存储能被所有session共享，重用的内容)，session cursor会经历一次open,parse,
              bind,execute,fetch和close中的一个或多个阶段

            相关参数解析：
                1.open_cursors：用于设定单个session中同时能够以open状态存放的session cursor的总数，若超过该总数，Oracle会报错ORA-1000：maximum open
              cursors exceeded
                    根据V$mystat查询当前会话的sid 
                        select sid from V$mystat where rownum<2;
                    根据V$open_cursor视图查询当前会话的所有open状态的或者被缓存的session cursor的总数
                        select count(*) from V$open_cursor where sid=xxxx;
                    根据V$sysstat查询当前数据库中所有以open状态存在的session cursor的总数
                        select name,value from V$sysstat where name='opened cursors current';
                2. session_cached_cursors：用于设定单个session中能够以soft closed状态存放的session cursor的总数，即单个session能在PGA中缓存的总数
                    此参数Oracle通过LRU算法来动态管理存储在其中的内容
                    根据SQL语句，会话的sid和V$open_cursor视图来查询PGA中session cursor的状态
                        select cursor_type from V$open_cursor where sql_text='xxx'/sql_text like 'xxxx'  and sid=xxxx;
                        状态显示为session cursor cached才是理想的缓存类型
                3. cursor_space_for_time(此参数仅对Oracle10g及以前的版本有用)：其默认值为false，一旦执行完目标SQL之后其对应的状态就不是execute(执行状态)了
              那么此时SQL所对应的child cursor就不能pin(锁)在库缓存中了，也就是说Oracle会释放该SQL所对应的child cursor上的library cache pin同时意味着该SQL
              对应的解析树和执行计划就可以被置换出库缓存了，可将其值设为true以减少库缓存相关的latch争用，但副作用是，增加对shared pool空间的压力，尤其是当
              shared pool空间紧张时更为明显

        分类及用法：
            隐式游标（implicit cursor）：其生命周期管理由sql引擎或pl/sql引擎自动完成
                常用属性
                    1. sql%found：表示一条SQL语句执行成功后受其影响而改变的记录数是否大于或等于1，通常适用于DML语句也适用于select into语句，在pl/sql里使用
                  select into语句时，当且仅当对应的select语句的返回结果只有一条记录时Oracle才不会报错

                    2. sql%notfound：表示一条SQL语句执行成功后受其影响而改变的记录数是否为0，通常适用于DML语句也适用于select into语句，当一条DML语句被执行
                  且这条语句没有没有任何改变记录的时候，又或者select into语句没有任何记录的时候，其值为true否则为false

                    3. sql%isopen：表示隐式游标是否处于open状态，对于淫隐式游标而言，SQL%isopen的值永远是false

                    4. sql%rowcount：表示一条SQL执行成功后，受其影响而改变的记录数，，通常适用于DML语句也适用于select into语句，当select into语句返回超过
                  一条以上的记录时，Oracle会报错TOO_MANY_ROWS,这种情况下其返回值是1，而不是select into语句所有对应的select语句实际查到的记录数，
                  sql%rowcount的值仅代表最近一次的SQL对应的值，后面执行的会把前面的覆盖掉
                
            显示游标（explicit cursor）：其定义和生命周期管理中的open，fetch和close均由人为在pl/sql代码中控制
                常用属性
                    1. 游标名%found：表示指定的显示游标是否至少有1条记录被fetch了，当游标被open后若一次都没有被fetch那么其值为null，当游标被fetch之后其值为
                  true直到全部fetch完成之后，若全部完成之后在执行一次fetch，此时的值为false。当游标还未被open则Oracle会报错INVALID_CURSOR

                    2. 游标名%notfound：表示指定的显示游标是否已经fetch完毕了，当游标被open后若一次都没有被fetch那么其值为null，当游标被fetch之后其值为
                  false直到全部fetch完成之后，若全部完成之后在执行一次fetch，此时的值为true。当游标还未被open则Oracle会报错INVALID_CURSOR

                    3. 游标名%isopen：表示指定的显式游标是否被open，常用于exception处理流程中，用于关闭那些发生异常而导致显示游标为被正常关闭的情形

                    4. 游标名%rowcount：表示指定的显示游标迄今为止一共fetch了多少行记录，当游标被open以后，若一次都没有fetch，则其值为0，若被fetch后
                  返回结果集为空，则其值为0，若返回结果集不为空，其值代表迄今为止一共fetch了多少行记录，当游标还未被open则Oracle会报错INVALID_CURSOR
                
                注意
                    1. 显式游标的标准用法为先open后fetch，再用while循环逐条处理数据，最后close
                    2. 显式游标标准用法的while循环内部处理一条记录后，一定记得执行fetch操作以跳到下一条记录，否则就是死循环

            参考游标（ref cursor）：其定义和生命周期管理中的open，fetch和close均由人为在pl/sql代码中控制
                常用属性
                    1. 游标名%found：表示指定的显示游标是否至少有1条记录被fetch了，当游标被open后若一次都没有被fetch那么其值为null，当游标被fetch之后其值为
                  true直到全部fetch完成之后，若全部完成之后在执行一次fetch，此时的值为false。当游标还未被open则Oracle会报错INVALID_CURSOR

                    2. 游标名%notfound：表示指定的显示游标是否已经fetch完毕了，当游标被open后若一次都没有被fetch那么其值为null，当游标被fetch之后其值为
                  false直到全部fetch完成之后，若全部完成之后在执行一次fetch，此时的值为true。当游标还未被open则Oracle会报错INVALID_CURSOR

                    3. 游标名%isopen：表示指定的显式游标是否被open，常用于exception处理流程中，用于关闭那些发生异常而导致显示游标为被正常关闭的情形

                    4. 游标名%rowcount：表示指定的显示游标迄今为止一共fetch了多少行记录，当游标被open以后，若一次都没有fetch，则其值为0，若被fetch后
                  返回结果集为空，则其值为0，若返回结果集不为空，其值代表迄今为止一共fetch了多少行记录，当游标还未被open则Oracle会报错INVALID_CURSOR
                
                灵活性
                    1. 定义方式非常灵活，有多种定义方式
                    2. open方式灵活，可以随时open，并且每次open对应的SQL语句都可以是不一样的
                    3. 可以作为存储过程的输入参数和函数的输出参数
                
                其他特性
                    1. 执行fetch操作时，除了常规的一次fetch一条数据之外，还可以一次fetch一批数据
                    2. 参考游标和显式游标可以嵌套使用
            
        对应关系
            1. 一个session cursor只能对应一个shared cursor，一个shared cursor可以对应多个session cursor
            2. Oracle在解析和执行目标SQL时，始终会先去当前的session的PGA中查找是否有配备的缓存session cursor
            3. 若在当前的PGA中找不到匹配的缓存session cursor，Oracle就会去库缓存中寻找是否有匹配的parent cursor，若找不到Oracle会新生成一个session cursor
          和一对shared cursor。若找到匹配的parent child但找不到匹配的child cursor则Oracle会生成一个session cursor和一个child cursor，并将新生成的child 
          cursor挂在之前匹配的parent下面。上述的两种条件都是硬解析
            4. 若在当前的PGA中找不到匹配的缓存session cursor，但是在库缓存中找到了匹配的parent/child cursor，此时Oracle会生成一个新的session cursor并重用
          刚才匹配的parent/child cursor 此过程对应为软解析
            5. 若在当前的session的PGA中找到了匹配的session cursor，则通过该session cursor直接访问到该SQL对应的parent/child cursor。此过程为软软解析

        总结：
            1. SQL文本不完全相同的目标SQL直接无法重用解析树和执行计划

    硬解析（hard parse）
        分类：
            1. 在库缓存中找不到匹配的parent cursor，此时Oracle会从头解析目标SQL，并重新生成一个parent cursor和child cursor并挂在对应的hash bucket
            2. 匹配到parent cursor但匹配不到child cursor,此时Oracle会从头解析SQL新生成一个child cursor并 将其挂在相应的parent cursor
        危害：
            1. 会导致shared pool latch的争用，会影响系统的性能和可扩展性（通常表现为CPU占用率居高不下）
                Oracle必须要在shared pool中分配出一块内存区域用于存储新产生的child cursor而这一动作是需要一定的shared pool latch来完成
                latch的作用之一就是保护共享内存的分配
            2. 导致库缓存相关latch（如 library cache latch）和mutex的争用
                硬解析需要扫描hash bucket中库缓存对象句柄链表，这一动作需要一定的library cache latch来完成
                latch的另一个作用就是用于共享SGA内存结构的并发访问控制
                muetx是一种轻量级的latch主要用于共享SGA内存结构的并发访问控制，其描述事件如 cursor:pin S  cursor:pin X  cursor:pin S wait on X 
                cursor:mutex S  cursor:muetx X  library cache:muetx X等
            硬解析会先持有library cache latch，并且在不释放library cache的情况下再持有shared pool latch以便从shared pool中申请分配内存，申请成功后会
          释放shared pool latch最后再释放library cache latch 
            
    软解析（soft parse）
        是指oracle在执行目标SQL时，在库缓存（library cache）中找到匹配的parent cursor和child cursor，并将其存储在child cursor中的
      解析数和执行计划拿来直接使用无须从头开始解析的过程
        与硬解析相比下的优势
            1. 不会导致shared pool latch的争用，会影响系统的性能和可扩展性（通常表现为CPU占用率居高不下）
            2. 软解析也可能会导致库缓存相关latch（如library cache latch）和mutex的争用，但软解析持有库缓存相关latch的次数要少，且
          持有时间较短，其造成的危害较硬解析来说小的多，也少的多
        
    软软解析：将一个使用过的session cursor设为soft closed同时将其缓存在当前session的PGA中，再去做parse bind execute fetch，此过程称为软软解析
        与软解析相比的有点
            1. 对session cursor的使用方面比软解析要好，软软解析省去了一个关闭现有session cursor和新建一个session cursor所耗费的资源和时间
            2.对库缓存相关latch的争用方面会比软解析要好，缓存在PGA中的session cursor所在的hash bucket中已经存储了目标SQL的parent的库缓存对象句柄地址

    建议：OLTP类型的系统在执行目标SQL时使用软解析，系统相较使用硬解析时，系统的性能和可扩展性会有显著提示


绑定变量bind variable：是一种特殊类型的变量，又被称为占位符（placeholder），通常出现在目标SQL文本中，用于替换SQL文本中的where条件或values子句（适用于
  insert语句）中的具体输入值
        语法格式：
            :variable_name，用冒号和自定义变量名称的组合，来替换目标SQL的SQL文本中的具体输入值
        优势：
            有效降低硬解析的次数，对高并发的OLTP系统效果尤为显著，对于OLAP/DSS类型的系统来说效果就微乎其微了
         关键字using用于给绑定变量赋值
    例如：
        declare 
            vc_sql_1 varchar2(4000);
            vc_sql_2 varchar2(4000);
            n_temp_1 number;
            n_temp_2 number;
        begin
            vc_sql_1 := 'insert into emp(empno,ename,job) values(:1,:2,:3)';
            executable immediate vc_sql_1 using 7370,'cuihua2'.'dba';
            n_temp_1 :=sql%rowcount;
            vc_sql_2 := 'insert into emp(empno,ename,job) values(:1,:1,:3)';
            executable immediate vc_sql_1 using 7371,'cuihua3'.'dba';
            n_temp_2 :=sql%rowcount;
            dbms_output.put_line(to_char(n_temp_1+n_temp_2));
            commit;
        end;
        /
        目标SQL中有几个绑定变量，关键字using后面就需要跟几个具体输入的值(各值之间以逗号分隔)，与直接用exec给绑定变量赋值有区别
        对于上述使用绑定变量的方式，关键字using后传入的绑定变量具体输入值只于对应变量所处的位置关系有关，与其名称无关，意味着只要
        变量所处的位置不同，他们对应的变量名称是可以相同的

        关键字returning可以和带有绑定变量的目标SQL连用，其目的是把受该SQL(通常指DML语句)影响的行记录的对应字段找出来

    pl/spl中批量绑定的典型用法
        批量绑定是一种优化后的使用绑定变量的方式，依然使用常规的方式来使用绑定变量，其优势在于批量绑定一次处理一批数据，而不是一次处理
        一条数据，所以此方法可以有效减少pl/sql引擎和sql引擎上下文切换的次数，即交互的次数
        pl/sql引擎可简单看作Oracle数据库中专门处理pl/sql代码中除SQL语句之外所有剩余部分(如变量，赋值，循环，数组等)的子系统
      sql引擎是Oracle数据库中专门处理SQL语句的子系统，pl/sql引擎和sql引擎上下文切换就是指他们之间的交互

        影响pl/sql代码性能有影响的主要有如下两点

            1. 显式或参考游标需要循环执行fetch操作时，这里的循环操作需要pl/sql引擎来处理，而fetch一条记录对应要执行的SQL语句需要SQL
      引擎来处理，若不做任何优化，则每fetch一条记录，pl/sql和sql引擎就要交互一次
            2. 显式或参考游标的循环内部需要执行SQL语句时，若不做任何优化，那么循环内部每执行一次SQL语句，pl/sql和sql引擎就要交互一次

        批量fetch对应的语法为: fetch cursorname bulk collect into [自定义的数组] <limit CN_batch_size>
            关键字limit cn_batch_size表示一次只批量fetch常量cn_batch_size所限制的记录数，该关键字是非必须的，若不使用该关键字，则
      会一次性把所有满足条件的记录全部fetch进来，当cursorname对应的结果集的记录数很大时，这种做法不可取，会给PGA带来很大的压力，
      进而无节制的占用PGA甚至撑爆paging space

        一次执行一批sql语句的语法如下
            forall i in 1..[自定义数组的长度]
                execute  immediate [带绑定变量的目标SQL] using [对应绑定变量的具体输入值]
            关键字forall表示一次执行一批SQL语句，可以和insert，update和delete语句连用

    绑定变量的使用原则
        1. 对于OLAP/DSS类型的应用系统，可以不适用绑定变量
        2. 对于OLAP类型的应用系统，在SQL语句中一定要使用绑定变量并且最好使用批量绑定，尽可能的在前台代码和后台pl/sql代码中都使用
        3. 对于OLAP和OLTP混合型的应用系统中如果有循环，不管循环是在前台代码还是后台pl/sql代码中，循环内部的SQL语句一定要使用绑定
      变量，最好是使用批量绑定变量，循环外部的SQL语句可以不使用

    绑定变量窥探：在SQL第一次被硬解析的时候生成，产生固定的解析树和执行计划，默认为打开状态
        由参数_optim_peek_user_binds来设定，其值默认为true即打开绑定变量窥探，false为关闭
        执行计划中peeked binds(identified by position)中显示的为窥探变量的具体信息
        优点：
            在计算目SQL的where条件的selectivity和cardinality的值时，避免使用默认的可选择率，有利于得到准确的执行计划
        缺点：
            一旦使用绑定变量窥探，其执行计划和解析树就会被固定，若传入的值并不适用与当前的解析计划时，其依然会按照固定的计划执行
            可使用别的方法使得绑定变量窥探所产生的解析树和执行计划失效，如：使用dbms_shared_pool.purge删除指定在库缓存中的共享游标
            查询SQL对应的address和hash_value的值，并将其合成一个字符串作为第一个传入参数传入并执行
            exec sys.dbms_shared_pool.purge('','c');其中c为常量，表示删除的意思，
            在Oracle10.2.0.4及一下版本中使用此方法市要手动设置event 5614566，否则该方法不起作用

    绑定变量的分级（仅适用于文本类型的绑定变量）：根据文本型绑定变量的长度将变量分成四个等级
        定义长度在32字节以内的为第一等级
        定义长度在33字节-128字节以内的为第二等级
        定义长度在129-2000字节以内的为第三等级
        定义长度在2000字节以上的为第四等级

    绑定列表分级与SQL child cursor对应关系
        若SQL文本中文本型绑定变量的定义长度发生变化，则其对应变量分配的内存空间可能也会随之变化，一旦内存空间发生变化，则之前SQL存储的解析树和执行计划不能重用
      此时SQL在被执行的时候可能会进行硬解析，（child cursor中除了会存储目标SQL的解析树和执行计划外，还会存储该SQL所使用的绑定变量的类型和长度，即该SQL的SQL
      文本没有发生任何变化，当绑定变量的定义长发生了变化，则再次执行时就可能进行硬解析）
    
    建议：在pl/sql代码中处理带文本型绑定变量的目标SQL时，应将这些变量的定义长度保持在同一个等级，可避免不必要的硬解析出现目标SQL的SQL文本中的绑定变量个数不宜
  太多，否则可能会导致目标SQL总的执行时间大幅度增加

    如何查看已执行的目标SQL中绑定变量的值
        1. 查询视图V$sql_bind_capture，若查不到则对应的shared cursor已经被置换出shared pool，此时可以尝试去AWR repository相关的数据字典表dba_hist_sqlstat
      或dba_hist_sqlbind中查询 
            select sql_id,name,position,datatype_string,laset_captured,value_string from V$sql_bind_capture where sql_id='xxx';
            其中value_string就是绑定变量的值

    满足以下条件之一时Oracle会捕获绑定变量的具体值
        1. 当含有绑定变量的目标SQL以硬解析的方式被执行时
        2. 当含有绑定变量的目标SQL以软解析/软软解析的方式重复执行时，该SQL中的绑定变量的具体输入值也可能会被Oracle捕获，默认情况下此操作每15分钟进行一次

    Oracle只会捕获那些目标SQL的where条件中的绑定变量的具体输入值，而对于哪些使用了绑定变量的inset语句，Oracle始终不会捕获其values子句中对应绑定变量的值  


Oracle中的游标共享：shared cursor间的共享，重用存储在child cursor的解析树和执行计划，而不用从头开始硬解析
    分类：
        1. 常规游标共享cursor_sharing
            受如下参数控制
                1. exact此参数为默认值，代表Oracle不会用系统产生的绑定变量来替换目标SQL的SQL文本中where条件或values子句中的具体值
                2. similar 代表Oracle会用系统产生的绑定变量来替换目标SQL的SQL文本中where条件或values子句中的具体值，但Oracle只会对他认为是安全的谓词条件
              在替换后进行重用解析树和解析计划，而其他的不会进行重用 （Oracle12c及后续版本中不支持此参数）
                    安全的谓词条件：一个谓词所在的目标SQL的执行计划不随该谓词条件的输入值的变化而变化，如等值查询
                    不安全的谓词条件有 >,>=,<,<=,between，使用带有统配符%的like,以及对直方图统计信息的目标列施加的等值查询等
                    在此参数控制下且谓词条件为不安全的谓词条件时，只有该谓词条件的当前输入值和之前输入值完全相同时，才会重用之前对应的解析树和执行计划
                3.force 代表Oracle会用系统产生的绑定变量来替换目标SQL的SQL文本中where条件或values子句中的具体值,并且无条件的重用之前硬解析时对应的解析树和
                执行计划，（不适用与Oracle11G及后续版本）
            通过show parameter cursor_sharing;查看属性
            通过alter session set cursor_sharing='similar'在当前会话中来更改属性值

        2. 自适应游标共享：让使用绑定变量的目标SQL在启用了绑定变量窥探的前提条件下，不再必须沿着之前硬解析产生的解析树和执行计划走下去，让其尽可能的在多个执行
        计划之间自适应的做出选择
            Oracle会根据执行目标SQL所对应的runtime统计信息（比如所耗费的逻辑读和CPU时间对应结果集的行数等）的变化，以及当前传入的绑定变量的输入值所在谓词条件
          的可选择率来进行综合判断是否需要触发目标SQL的硬解析动作
          
          做的第一件事
            扩展游标共享：将目标SQL对应的child cursor标记为bind sensitive，指Oracle觉得某个含有绑定变量的目标SQL的执行计划会随着传入的值的变化而变化
                满足如下条件时目标SQL对应的child cursor会被标记成bind sensitive 
                    1. 启用了绑定变量窥探
                    2. 该SQL使用了绑定变量
                    3. 该SQL使用的是不安全的谓词条件

          第二件事
            将目标SQL对应的child cursor标记为bind aware 指Oracle已经确定某个含有绑定变量的SQL的执行计划会随着传入的值的变化而变化
                满足如下条件时会被标记成bind sensitive
                    1. 该SQL对应的child cursor已经被标记成Bind sensitive
                    2. 该SQL在接下来的连续两次执行时，所对应的runtime统计信息与该SQL之前硬解析时所对应的runtime统计信息存在较大差异
            对于自适应游标共享而言V$sql中列is_bind_senstive,is_bind_aware,is_shareable分别用来表示child cursor是否是，bind sensitive,bind aware,以及
            是否为可共享的，这里的共享是指该child cursor中的解析树和执行计划是否能被重用，若不能该child cursor也会在第一时间内别age out出shared pool中
        
            V$SQL_CS_STATISTICS视图用于显示指定child cursor中存储的runtime统计信息
            V$SQL_CS_SELECTIVITY视图用于显示指定一个已经被标记为bind aware的child cursor中存储的含绑定变量的谓词条件所对应的可选择率的范围
                可选择范围计算
                    选择率=选中的总数/总数
                    第一次做硬解析时的可选择率为S，然后将S上下浮动10%就得到了上述可选择率的范围，计算公式为[0.9*S,1.1*S]
                    根据SQL_id查询相应的信息
                    select child_number,predicate,range_id,low,hight from V$SQL_CS_SELECTIVITY where sql_id='xxx'
                    perdicate对应为谓词条件，low对应为下限high对应为上限

            执行流程
                1. 当目标SQL第一次被执行时，Oracle会用硬解析，同时Oracle会根据一系列条件(是否使用绑定变量，参数cursor_sharing的值，绑定变量所在列的直方图
                该SQL的where条件是等值查询还是范围查询等)来判断是否将该SQL所对应的child cursor标记为bind sensitive,标记为bind sensitive的child cursor，
                Oracle会把执行该SQL时所对应的runtime统计信息额外的存储在该SQL所对应的child cursor中
                2. 当目标SQL第二次被执行时。Oracle会使用软解析，并重用第一次执行时产生的child cursor中存储的解析树和执行计划
                3. 当目标SQL第三次被执行时，若该SQL对应的child cursor已经被标记成bind sensitive同时在第二次，第三次执行该SQL时所记录的runtime统计信息和
                该SQL第一次硬解析时所记录的统计信息存在较大差异，此时就会进行硬解析，产生一个新的child cursor(会挂在原parent cursor下),并将新的child 
                cursor标记为bind aware
                4. 对于标记为binf aware的child cursor所对应的目标SQL，当其再次被执行时，Oracle根据当前传入的绑定变量值所对应的谓词条件的可选择率，来决定
                使用硬解析还是软解析
                    判定条件依据：若当前传入的绑定变量值所在的谓词条件的可选择率处于之前硬解析时存储在V$SQL_CS_SELECTIVITY的可选择率的范围内时会使用软解析
                        并重用相关解析树和执行计划，反之则为硬解析
                若硬解析所产生的执行计划和原有child cursor中存储的相同，此时会生成一个新的child cursor，将原有的标记为非共享的，并将新产生的和旧的合并(对
                于可选择率范围的合并，要么扩展对应的下线，要么扩展对应的上限，若有多次合并，则以最后一次合并为准)

            自适应游标共享的缺陷
                1. 可能导致一定数量的额外的硬解析
                2. 可能导致一定数量的额外的child cursor挂在同一个parent cursor下，会增加软解析/软软解析时查找匹配child cursor的工作量，也会增加shared pool
                空间的负担

            禁用自适应游标共享的方法
                1. 将隐含参数_optimizer_extended_cursor_sharing和_optimizer_extended_cursor_sharing_rel的值均设为none，通过禁用可扩展游标共享，使得
                child cursor不能被标记为bind sensitive，从而不能被标记为bind aware，来达到禁用自适应游标共享的目的
                2. 将_optimizer_adaptive_cursor_sharing的值设为false，此时所有的child cursor都将不能再被标记为bind aware
                硬性条件：SQL中绑定变量的数量不超过14个时，自适应游标共享才会生效，一旦超过，则child cursor 用不会被标记为bind sesitive 

    只要SQL使用了绑定变量，只要满足一定条件，自适应游标共享就会自动生效

session cursor的生命周期
    阶段1：open
    阶段2：parse
    阶段3：describe(仅适用于查询语句，明确SQL所涉及的具体列的名称，类型和长度)
    阶段4：define(仅适用于查询语句，用于决定一组变量在PGA中的位置，大小和数据类型，这组变量用于存储目标SQL的各个具体查询列所对应的查询结果)
    阶段5：bind(仅适用于绑定变量的目标SQL，为绑定变量在PGA中预留内存空间，并创建指向这些空间的指针)
    阶段6：parsellelize(仅适用于开启了并行的情形)
    阶段7：execute(实际执行阶段)
    阶段8：fetch(仅适用于查询语句)
    阶段9：close
    
    对于查询语句而言，可能会经历上诉所有阶段，若没有使用绑定变量则不需要经历阶段5，若没有使用并行查询，则不需要经历阶段6
    对于DML语句，其可能经历上述1，2，5，6，7，9，若没有使用绑定变量则不需要经历阶段5，若没有使用并行查询，则不需要经历阶段6
    对于DDL语句，只会经历阶段1，2 

    session cursor的parse阶段会做下列事情
        1. 执行对目标SQL的校验，Oracle会执行对目标SQL的语法，语义和权限的检查
        2. 执行对目标SQL的查询转换
        3. 执行对目标SQL的查询优化，

Oracle中的应用类型
    第一种：目标SQL不使用绑定变量，每次执行时，其对应的session cursor都需要经历open, parse,execute,fetch,close
        常见为硬解析
        总结和建议：
            1. 没有使用绑定变量，系统硬解析的比例非常高
            2. 性能和可扩展性是四种应用类型中最差的，但适用于OLAP/DSS类型的系统
            3. 将cursor_sharing的值设为force，可以在不改一行应用代码的情况下有效降低硬解析次数，进而提高系统的性能和可扩展性

    第二种：目标SQL使用了绑定变量，每次执行时，其对应的session cursor都需要经历open, parse,bind,execute,fetch,close
        常见为软解析
        总结和建议：
            1. 与第一种相比，使用了绑定变量，有效降低了系统硬解析的数量，提示了系统的性能和可扩展性
            2. 执行该类型应用系统中的每一条SQL语句时，其对应的session cursor都需要经历open parse bing execute fetch close这些阶段
            3. 软解析会引发对session cursor的不断重复open和close，以及对库缓存相关latch的争用，会影响其性能和可扩展性
            4. 把SESSION_CACHED_CURSORS的值从0改成一个较大的值时，可以提升系统性能和可扩展性
            5. 从Oracle10g开始session_cached_cursors的值在默认情况下就大于0

    第三种：目标SQL使用了绑定变量，每次执行时，除了open和close以外，其余的parse,bind,execute,fetch每次都需要经历
        常见为软软解析
        总结和建议：
            1. 有效的降低了系统解析的数量，提升了系统的性能和可扩展性
            2. 执行该类型应用系统中的每一条SQL语句时，其对应的session cursor都需要经历parse bind execute fetch，但open和close只经历一次
            3. 与第二种相比，可以省掉open一个新的session cursor和关闭一个现有session cursor所耗费的时间，库缓存相关latch的争用方面好的多
            4. 将cursor_sharing 的值设成force不会对系统有额外的提升
            5. 将session_cached_cursors的值改成一个比原先更大的值，不会对系统有额外的提升
            
    第四种：目标SQL使用了绑定变量，每次执行时，除了execute和fetch每次都需要经历以外其余的open,parse,bind,close都只需经历一次
        常见为改进的软软解析，一次解析多次执行
        特点：  
            1. SQL语句使用了绑定变量
            2. 数据库端参数session_cached_cursors的值大于0
            3. 每一条SQL语句对应的session cursor会反复经历execute和fetch，但open parse bind close只经历一次
        建议：
            1. 尽可能的把应用系统设计成一次解析多次执行的方式，并同时配合使用批量绑定
            2. 把参数cursor_space_for_time的值设成true能提升系统性能和可扩展性

Oracle里的查询转换

    查询转换：又称查询改写，指Oracle在解析目标SQL时可能会对其最等价的改写，目的是为了更高效的执行目标SQL，即Oracle会将目标SQL改写成语义上完全等价
    但执行效率却更高的形式

    子查询：当查询结果是另一个查询条件的时，称之为子查询
        Oracle数据库里，子查询前的where条件如果是下列条件之一，那这种类型的目标SQL在满足一定条件后就可以做子查询展开
            1. single-row(即 =，<,<=,>,>=,<>)
            2. exists
            3. no exists
            4. in 
            5. not in
            6. any 
            7. all
        若子查询前的where条件是single-row条件，则该子查询的结果之多只会返回一条记录，若子查询前的where条件是single-row条件之外的上述其他条件，则返回
        结果包含多条记录

        子查询展开：一种处理带子查询的目标SQL的一种优化手段，指优化器不再将目标SQL中的子查询当作一个独立的处理单元来单独执行，而是将该子查询转换为它自身和
        外部查询之间等价的表连接。这种等价表连接要么将子查询拆开(将该子查询的表，视图从子查询中拿出来和外部查询中的表，视图做表连接)，要么不拆开但会把该子
        查询转化成一个内嵌视图再和外部查询中的表，视图做表连接

        
        
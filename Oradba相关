windows下启动数据库
    sqlplus /nolog 没有任何连接状态
    conn 用户名/密码 连接到数据库中

Linux下启动数据库
    sqlplus /nolog 无连接状态打开SQLplus
    conn /as dba 用dba身份连接
    startup启动数据库
    conn 用户名/密码  连接到数据库

conn 用户名/密码 as sysdba 以数据库管理员的身份连接数据库

用户
给用户名解锁
    alter user 用户名 account unlock

查看当前用户的所有表
    select table_name from user_tables;

查看数据库所有用户的用户信息
    dba_users;
    select * from dba_users;

查看当前用的用户信息
    user_users;
    select * from user_users;
 
创建用户
    create user 用户名 identified by 密码 default tablespace 表空间名称 temporary tablespace 临时表空间名

修改用户信息
    alter user 用户名 identified by 密码 default tablespace 表空间名称 temporary tablespace 临时表空间名

查看创建的用户
    select username from dba_users;

更改密码
    alter user 用户名 identified by 新密码

锁定用户
    alter user 用户名 account lock;

解锁用户
    alter user 用户名 account unlock;

删除用户
    drop user 用户名 cascade;
    cascade表示将用户连同其创建的东西去全部删除

修改用户所属的表空间
    alter user 用户名 default/temporary tablespace 表空间名称;




三种权限等级
    connect
    resource
    dba

查询系统权限
    select * from system_privilege_map;
    常用的有以下权限
        create session：创建会话
        create sequence：创建序列
        create table：创建表
        create user：创建用户
        create view：创建视图
        alter user：更改用户
        drop user：删除用户 

给用户授权
    grant 权限,权限2 to 用户1/角色1，用户2/角色2，public（表示全部用户）

回收权限
    revoke 权限 from 用户/public
    revoke 权限 from 角色

对象：例如表
查询所有Oracle对象权限
    select * from table__privilege_map;

将操作对象的某些权限/所有权限授权给用户或者角色
    grant 对象权限/所有对象权限 on 对象名 to 用户/全部用户/角色
        对象名要指定清楚，比如某某用户的某某表 system.temp system用户下的temp表     

将对象的相关权限撤销
    revoke 对象权限 on 对象名 from 用户/全部用户/角色


角色：可以理解为多个权限的集合

创建角色
    create role 角色

删除角色
    drop rolo 角色名

角色授权
    grant 权限 to 角色

将角色赋予用户
    grant 角色 to 用户

将用户的角色撤销
    revoke 角色名 from 用户




表空间
创建表空间
    1.create tablespace test_tablespace(表空间名称) datafile 'testfile.dbf（表空间实际存放的位置）' size 10m（表空间大小）; 
    2.create tablespace test_tablespace(表空间名称) datafile 'testfile.dbf（表空间实际存放的位置）' 
    (extent management local默认为本地管理表空间，可不输入) size 10m（表空间大小） uniform size 1m(数据库扩展默认大小);
创建临时表空间
    create temporary tablespace temp_tablespace tempfile 'tempfile.dbf' size 10m;   

向表空间增加数据文件
    alter tablespace 表空间名称 add datafile(注意是datafile不是tempfile) '数据文件名称以.dbf结尾' size 10m;

从表空间内删除数据文件
    alter tablespace 表空间名称 drop datafile '数据文件名称'
        注意：不能删除表空间的第一个创建的数据文件，如果需要删除，就需要删除整个的表空间

删除表空间
    drop tablespace 表空间名 （可选参数including contents,add datafiles,cascade constraints）
    drop tablespace 表空间名 including contects 删除表空间中的所有区段(EXTENTS)  
    drop tablespace 表空间名 add datafiles 删除表空间中的数据文件，文件格式为oracle格式
    drop tablespace 表空间名 cascade constraints删除和该表空间中的表相关的引用完整性约束

修改表空间大小
    1.向表空间增加数据文件
        alter tablespace 表空间名称 add datafile(注意是datafile不是tempfile) '数据文件名称以.dbf结尾' size 10m;
    2.创建时使用autoextend on 语句使表空间自动扩展
        create tablespace test_tablespace(表空间名称) datafile 'testfile.dbf（表空间实际存放的位置）' 
        (extent management local默认为本地管理表空间，可不输入) size 10m（表空间大小） autoextend on;
    3.创建之后修改为autoextend on自动扩展
        alter database datafile 文件名 autoextend on ;
    4.修改数据文件大小，即重新设置表空间中某个数据文件的大小
        alter database datafile 数据文件路径 resize 100m;


修改用户所属的表空间
    alter user 用户名 default/temporary tablespace 表空间名称;

修改表空间的状态
 
 1.连接或脱机状态
    alter tablespace 表空间名称 online/offline:
        online：表示联机状态
        offline：表示脱机状态
    alter tablespace user online/offline;
        将user表空间设置为联机或者脱机状态
    select status from dba_tablespaces where tablespace_name = '表空间名（名称必须大写）';
        查看系统管理员表空间中user的状态

    以下情况需要将表空间设为脱机状态
        允许用户访问数据库的一部分，某些表空间不允许访问
        执行脱机的表空间备份
        在数据库打开时，恢复表空间或表空间中的数据文件
        在数据库打开时，移动表空间中的数据文件

2.只读和可读写状态
    read only 只读状态
    read write  读写状态
    alter tablespace 表空间名称 read only/read write;
    alter tablespace user read only/read write
        将表空间user设为只读或者读写状态

查看表空间
    select tablespace_name from dba_tablespaces;
查看表空间存储的位置
    dba_data_files 存放数据库数据文件
    select file_name from dba_data_files where tablespace_name = '表空间名（名称必须大写）';

查看临时表空间存储位置
    select file_name from dba_temp_files where tablespace_name = '表空间名（名称必须大写）';
查询所有表空间的详细信息
    系统管理员：select tablespace_name from dba_tablespaces;
    用户：select tablespace_name from user_tablespaces;


启动数据库
    conn /as sysdba 以数据库管理员身份连接
        三种主要连接模式
            nomount状态：只打开数据库实例
            mount状态：根据参数文件中控制文件的位置，找到并打开控制文件，读取各种参数信息
            open状态：打开数据文件并进行一系列的检查工作，这些检查工作用于数据恢复
                open read only：只读模式打开数据库
                open read write：读写模式打开数据库（默认情况下）
        其他连接模式
            force：若数据库已启动并不会报错，而是自动shuntdown abort当数据库，然后在启动
            restrict：此模式启动，只有拥有restricted session 权限的用户才能登陆数据库
            pfile：从指定的参数文件启动数据库
    startup nomount
        从mount状态切换到其他状态
            alter database mount;切换到mount状态
            alter database open;切换到open状态
    从静态文件启动数据库
        startup pfile='文件所在路径'



关闭数据库
    1.SHUTDOWN ABORT
		此模式用于紧急情况，如其他形式的关闭方式都未能成功时。这种模式的关闭是最快的。但是，随后打开该数据库可能时间会显著增加因为必须执
	行实例恢复以使数据文件一致
		注意因为 SHUTDOWN ABORT 不对打开的数据文件执行检查点操作，所以在重新打开数据库之前，必须进行实例恢复
	2.SHUTDOWN IMMEDIATE(常用关闭方式)
		这种模式通常是除 SHUTDOWN ABORT 之外最快的关闭模式了。Oracle 数据库终止任何正在执行的 SQL 语句，并断开用户连接。所有活动事务都将
	终止，并回滚所有未提交的更改。
	3.SHUTDOWN TRANSACTIONAL
		这种模式可以防止用户启动新事务，但在关闭之前会等待所有的当前事务完成。这种模式可能会花费相当长的时间，这取决于当前事务的特征。
	4.SHUTDIWN NORMAL（默认连接方式）
		这是默认的关闭模式。在关闭之前数据库会等待所有连接的用户断开连接。

移动控制文件，磁盘故障时
    使用spfile启动数据库时如何移动控制文件
    1 获取控制文件名
        select status,name from v$controlfile;
    2 使用alter system set指令修改spfile中控制文件名
            alter system set control_files='C:\oracle\backup\CONTROL01.CTL'（新地址）,
            'C:\oracle\backup\CONTROL02.CTL' scope=spfile;修改信息记录在spfile中
    3 关闭数据库
        shutdown immediate 
    4 控制文件到迁移目录
        host copy D:\APP\SUNGL\ORADATA\ORACLE\CONTROL01.CTL(原地址) C:\oracle\backup\CONTROL01.CTL(新地址)
        host copy D:\APP\SUNGL\ORADATA\ORACLE\CONTROL01.CTL C:\oracle\backup\CONTROL02.CTL
    5 重启数据库
        startup
    6 验证修改结果

备份控制文件    备份文件不是最新的，在恢复数据库时最好不要使用备份文件以防数据丢失，
    方法一
        alter database backup controlfile to '备份后的控制文件所在地址，以.ora结尾';
    方法二(将控制文件备份到追踪文件)
        查看参数sql_trace是否为true(该参数默认为false,备份完成之后将值重新设为false，以避免不必要的性能浪费);
            show parameter sql_trace;
            设置为true
            alter system set sql_trace = true ;
        执行备份
            alter database backup controlfile to trace;
        查看备份目录
            show parameter user_dump_dest;
        打开上面的目录去寻找备份文件
            找到alter_oracle,查看最后几行找到backup，backup所指向的就是备份的控制文件的名称

恢复控制文件
    部分控制文件丢失或损坏的情况
        若数据库正在运行，先关闭数据库，再将完好的控制文件复制到已丢失或出错的控制文件的位置，要将新文件的名称和旧文件的名称保持
    一致
        若存储控制文件的目录结构也被破坏，则需要重新建立一个目录用于存放控制文件，并为该控制文件命名，此时需要修改数据库初始化参数
    文件文件中控制文件的位置信息。
            使用alter system set指令修改spfile中控制文件信息
                （alter system set control_files='C:\oracle\backup\CONTROL01.CTL','C:\oracle\backup\CONTROL02.CTL' 
            scope=spfile;修改信息记录在spfile中）

    控制文件全部丢失或损坏    此情况使用备份的控制文件来重建控制文件
        关闭数据库，将备份的数据文件复制到损坏的控制文件的位置，并将文件名修改为已损坏的文件名
            打开数据库到mount状态startup mount;再切换到open状态 alter database open
        此方法会造成一定程度的数据丢失，勤备份！

    通过跟踪文件重建控制文件
        跟踪文件中记录了用于建立控制文件的sql语句适当的编辑跟踪文件，然后用sql指令重建控制文件，创建控制文件成功后要进行数据库恢复
    即recover database 并在打开数据库后创建一个临时表空间用于数据排列

数据文件：
    查询数据文件
        select file_name from dba_data_files

控制文件
    是一个二进制文件，记录了数据库的状态信息，如重做日志文件与数据文件的名字和位置，归档重做日志的历史等，归档日志的历史记录会让该
文件逐渐变大，但其大小不会超过64MB，控制文件和数据库是一一对应的关系
    查看控制文件位置信息的方法
        select value from V$parameter where name='control_files';
        show parameter control_files;
    查看控制文件所存储的信息
        select * from V$controlfile_record_section;
    
    常用的从控制文件中读取数据的数据字典
        V$database：数据库信息
        V$instance：实例信息
        V$tablespace：表空间信息
        V$backup：备份信息
        V$tempfile：临时信息
        V$archive：归档信息
        V$log：日志信息
        V$logfile：日志文件
        V$loglist
        V$archived_log：归档日志信息

参数文件
    静态文件pfile：静态的正文件，可以使用文本编辑器编辑
        从spfile创建pfile
            create pfile from spfile
        从内存中创建pflie
            create pfile from memory 
    spfile文件：动态的二进制文件，只能通过Oracle的指令修改
        alter system 指令来修改参数值
        Windows默认名称为spfile(数据库名称).oracle
        unix默认名称为spfile数据库名.ora

        show parameter spfile 
            1 查看动态参数文件的位置
            2 若value值为空则为pfile启动反之则为spfile启动

        从pfile创建spfile
            先从spfile创建一个pfile
                create pfile from spfile
            修改pfile之后再创建spfile
                使用pfile默认目录名
                    create spfile from pfile
                不使用pfile默认目录名
                    create spfile from pfile = 'pfile文件名'
        从内存中创建spflie
            create spfile from memory 

    数据库初始化参数组成及查看方法
        初始化参数由一系列的参数/参数值对组成 参数db_name='orcl',db_name为参数名，orcl为参数值
        使用show parameter 参数名 查看参数和参数值
        使用数据字典v$parameter查看参数值 select value from v$parameter where name = '参数名';

    修改参数值
        alter system set 参数名 = 参数值 （可选参数有 comment = 'text'（对参数的描述），
    deferred(修改是否立即生效 deferred表示下次会话时生效) scope=memory只对当前实例生效|spfile下次连接时生效|both前面两个都生效）

    oracle11g中默认使用spfile启动数据库，此时pfile至是一个模板信息，不可用，必须创建一个可用的pfile文件才能使用
        create pfile from spfile
        静态文件的默认位置在Oracle安装目录下的admin/oracle_sid（数据库的名称）/pfile文件夹下

重做日志文件信息

    添加一个重做日志组
        alter database add logfile 日志组名称 ('日志组文件存放路径以.log结尾','') size 10m;
    向重做日志组中添加成员
        alter database add logfile member '文件路径以.log结尾' to 组名,'文件路径以.log结尾' to 组名;
        
    删除一个重做日志组(当前正在使用的日志组无法删除)
        alter database drop logfile 日志组名称;
    删除重做日志组成员(当前正在使用的日志组成员无法删除)
        alter database drop logfile member '文件路径以.log结尾' to 组名,'
    删除重做日志文件中的所有数据
        alter database clear logfile 组名;

    强制启动检查点
        alter system checkponit;
    切换正在使用的日志组
        alter system switch logfile;
    更改日志组的大小
        通过删除日志文件所在的日志组，然后重建日志文件，用这种间接的方式更改日志组的大小

    V$log查看重做日志信息
        select * from V$log;
    V$lofile查看重做日志存放位置信息
        select * from V$logfile
    判断数据库是否处于归档模式
        archive log list;
    设置数据库处于归档模式方法
        1.关闭数据库
            shutdown IMMEDIATE
        2.启动数据库到mount状态
            startup mount;
        3.设置数据库为归档模式
            alter database archivelog;
            非归档模式
            alter database noarchivelog;
        4.打开数据库到
            alter database open;
    


还原段
    系统还原段为系统表空间使用，非系统还原段为用户创建的表空间使用

    自动还原段管理
        undo_managment：说明还原段的管理方式
        undo_tablespace：说明还原表空间的名字
    创建还原表空间
        create undo tablespace 还原表空间名 datafile '文件路径以.dbf结尾' size 100m autoextend on ;
    向表空间中添加数据文件
        alter tablespace 表空间名 add datafile '文件路径以.dbf结尾' size 10m;

    删除还原表空间（要删除的表空间不应处于使用或工作状态）
        drop tablespace 表空间名
    
    重命名还原表空间
        alter tablespace 旧名 rename to 新名
    设置还原表空间为自动扩展
        alter database datafile '文件路径以.dbf结尾' autoextend on;

    查看还原表空间信息
        select * from dba_tablespaces where contents='UNDO';
    查看当前使用的还原段和相关参数
        show parameter undo 
    切换还原表空间
        alter system set undo_tablespace=还原表空间名

    undo_retention参数：
        该参数是一个时间值，说明当事务提交完成之后，在多长时间内此数据仍然存在于还原表空间中，如果时间过长且修改
        数据的事务很多，会造成还原表空间的不足。
    修改undo_retention的值
        alter system set undo_retention=1200（默认单位为秒）;
        通过show parameter undo 参数验证结果
        


exp备份数据库(导出)
    exp使用程序可以导出整个数据库，一个用户的所有对象，一个表空间或特定的表，使用exp导出的数据
    必须使用IMP恢复/导入

    常用参数
        1.userid：无默认值，说明登陆数据库的用户名和密码
        2.buffer：指定数据缓冲区的大小
        3.file：将备份的数据文件重命名，若不命名则默认为expdat.dmp或EXPDAT.DMP 
        4.compress：该参数默认值为Y或N，使Oracle对导出的数据进行配置
        5.grants：默认值为Y或N。控制授权的导出
        6.indexes：默认值为Y或N，控制索引的导出
        7.log：该参数说明在导出备份时，是否需要创建一个备份日志，来记录整个备份过程
        8.full：说明是否导出整个数据库的所有对象，默认值为Y或N，如果全部导出，则连接的用户必须具有dba权限才行
        9.tables：若该表是当前连接的用户所有，则直接输入表名，否则输入模式名和表名。若有多个则用逗号隔开，
        10.owner：说明要导出特定用户的数据库对象
        11.trigger：默认值为Y或N，说明是否导出用户下的触发器
        12.statistics：该参数值为estimate,computer,none指出产生的对象的统计方式，若选择estimate，computer
        则以该方式计算统计量，none表示不使用统计量
        13.constraint：默认值为Y或N 说明是否导出约束
        14.feedback：每隔一定行数显示备份进展情况，该参数值为0到n的任何有效数字
        15.filesize：设置每个转储文件的最大值
        16.tablespace：说明要导出的表空间名称
        17.resumable：该参数的值为Y或N指出exp是否使用Oracle的可恢复空间管理工具，使用该工具导出数据时，如发生与空间
        相关的错误应终止导出
    导出整个数据库
        D:\>exp liu/oracle@oracle full=y(全部导出) file=backup_testdata.dmp(导出到本地的文件名))
    导出整个数据库结构，不导出数据
        D:\>exp liu/oracle@oracle full=y row=n（使用此参数） file=backup_testdata.dmp
    导出特定用户的表(若需要导出的不是当前用户的表则需要使用username.tablename的形式说明该表属于哪个用户)
        D:\>exp liu/oracle@oracle tables=socct.dept file=backup_testdata.dmp
    导出当前用户的表
        D:\>exp liu/oracle@oracle table=dept(只导出dept表) file=table.dmp
    导出指定用户的所有数据（导出指定的用户）
        D:\>exp liu/oracle@oracle owner=scott(用户名) file=backup_testdata.dmp
    导出特定的表空间
        D:\>exp liu/oracle@oracle tablespaces=表空间名 file=backup_testdata.dmp
    

imp恢复数据库(导入)
    导入通过exp指令导出的备份数据，imp可以导入一个完整的数据库，一个指定的用户的所有数据库对象，一个特定的表空间和一个特定的表
    常用参数
        1.userid：说明登录数据库的用户名和密码
        2.buffer：说明输入数据缓冲区的大小
        3.file：说明exp程序创建的备份名，有时需要绝对路径
        4.show：导入过程中是否显示备份文件的内容
        5.ignore：是否忽略在导入备份过程中的错误
        6.grants：是否导入备份文件中的授权
        7.indexes：是否导入索引
        8.rows：是否导入数据，默认参数为Y或N，若为N则不输入数据
        9.log：是否将导入过程记录到日志文件中
        10.full：将整个备份文件导入
        11.formuser：允许将一个备份文件中的对象从一个用户复制到另一个用户，该参数说明数据的源用户
        12.touser：允许将一个备份文件中的对象从一个用户复制到另一个用户，该参数说明数据的目标用户
        13.tables：说明要导入的表名
        14.skip_unusable_indexes：该参数默认值为Y或N，说明是否需要重建已经设置为unuable状态的索引
        15.statistics：说明在导入对象后对统计量的处理，参数为always(从备份文件中导入统计量)，none(不做任何动作),
        safe(如果使用可靠的优化器，则允许导入优化器统计量)),recalsulate(重新计统计量，而不是从备份文件中导入统计量)
        16.constraints：说明是否导入备份数据中的约束
        17.compile：说明是否引入进程来编译过程，包和函数

    恢复整个数据库（导入整个数据库）
        D:\>imp liu/oracle@oracle full=y file=backup_testdata.dmp ignore=y(忽略导入过程中的错误)
    恢复特定的表
         D:\>imp liu/oracle@oracle ftables=表名  file=backup_testdata.dmp 
    恢复指定的用户
         D:\>imp liu/oracle@oracle full=y file=backup_testdata.dmp（该用户的备份文件）
    导入指定的表到指定的用户(将Scott用户的emp表导入到system用户中，即在system用户中创建一个表，然后将数据插入)
         D:\>imp liu/oracle@oracle tables=emp fromuser=scott touser=system file=backup_testdata.dmp 



数据泵(是imp和exp程序的扩展)

    与imp和exp程序的区别
        1.更快的速度，更大的数据量
        2.数据泵技术基于数据库服务器，在服务器段产生进程，并且将备份的数据备份在数据库服务器中
        3.不同于用户进程，更像一个控制进程，在客户端和服务器端建立会话，并控制整个备份过程
        4.传统imp和exp备份的数据格式与数据泵备份的数据格式不兼容
        5.使用数据泵导出数据前必须要先创建目录对象
        
    数据泵的优点
        1.更快的的速度，可并行作业
        2.重启失败的作业，手动停止作业或重启作业
        3.独立于客户机，数据泵技术是基于数据库服务器，是数据库服务器的一部分
        4.支持网络操作，在两个联网的数据库服务器直接导入导出数据文件，无需备份
        5.更加细化的导入导出

    查看dba用户默认的数据泵工作的目录
        select * from dba_directories where directory_name='DATA_PUMP_DIR';

    非dba用户需要创建数据泵的工作目录，创建方法如下
        1.登录dba用户，给用户授予创建目录的权限
            conn system/oracle 
            grant create any directory to 用户名;
        2.登录授权之后的用户，创建数据泵的工作目录
            conn 用户名/密码
            create directory 目录对象名 as '目录的路径';(操作系统不会自动创建此目录，须手动进行创建)

    导出EXPDP(服务器端导出程序)，ADD_FILE是其专有参数，允许挂起和恢复作业，也支持从失败或终止的作业中重启，导出数据库对象的选择更加的细化，
并且提供并行处理，expdp支持两种数据访问的方法外部表和直接路径访问方法，expdp提供了三种提取数据的方法，一是只提取数据库中的 元数据，
二是只提取数据库中的数据，三是同时提取元数据和数据

    导出参数
        1.attach：连接到现有作业，格式为attach=作业名
        2.content：说明要导出的是元数据还是数据，参数为all,data_only,metadata_only
        3.directory：说明要导出的备份文件，日志文件和sql文件的存储目录，非dba用户需要提前设置该目录
        4.dumpfile：说明导出备份的文件名
        5.estimate：计算导出作业导出文件的大小，选项为blocks(基于数据库块大小的倍数计算备份文件大小)，
            statistics(使用当前对象的统计量来计算导出的备份文件的大小)
        6.estimate_only：只估计导出文件的大小，不进行实际的导出作业，参数为Y或N
        7.exclude：排除不需要导出的特定的对象
        8.flashback_scn：使用Oracle的闪回特性，使用规定的scn进行闪回
        9.full：说明是否导出整个数据库对象
        10.include：说明要导出的特定对象，如有多个使用逗号隔开，如只导出表，此时会导出和表有依赖关系的对象，如索引，触发器等
        11.job_name：说明导出作业名，命名格式为sys_operation(导入/导出)_mode(数据类型)_nm(编号)
            如导出scott用户的元数据"scott"."sys_export_schema_01"
        12.logfile：说明在导出时记录导出过程的日志文件名，默认名为export.log必须和导出文件保存在相同的目录下，即directory参数指定的目录
        13.parallel：设置可同时导出作业时最大的进程数，默认为1
        14.query：允许使用sql语句程序过滤导出的数据
        15.schemas：说明要导出的模式(用户所拥有的数据库对象的集合)，要使用该参数登录数据库的用户必须拥有exp_full_database的权限
             对象：包括索引，表，视图，函数，包，过程，同义词，序列，触发器
        16.status：监视导入作业的频率，默认值为0
        17.tables：说明要导出的表名,会导出与表有关系的对象
        18.tablespaces：说明要导出的表空间的列表，同时也导出与表空间有依赖关系的所有数据库对象
        19.version：将数据库对象导出到指定的数据库版本，解决数据库对象从高版本到低版本迁移时版本兼容的问题
    交互式参数
        1.add_file：向备份文件中添加文件以增加目录空间，解决因备份文件空间不足导致停止的问题
        2.stop_job：停止运行的数据泵作业，数据库服务器端的导出数据服务器进程终止
        3.start_job ：重新恢复意外停止的数据泵作业
        4.kill_job ：杀死客户机进程和数据泵作业
        5.continue_client：退出交互模式恢复正在运行的导出数据泵作业，实际的数据泵作业不受影响
        6.exit_client：停止交互式会话，实际的数据泵作业不受影响
    导出整个数据库
        D:\>expdp system/oracle@oracle dumpfile=pump_dir(目录):mydb_%u.dat(文件名,若文件存储空间不足%u实现备份文件自动创建)
         filesize=100m nologfile=y job_name=tom full=y
    导一个模式（没有schema参数，默认导出登录数据库时的模式对象）
        D:\>expdp scott/tiger@oracle directory=pump_dir（目录） dumpfile=scottschema.dmp 
        logfile=scottschema.log
    导出一个特定的表
        D:\>expdp system/oracle@oracle dumpfile=pump_dir:scott_tables_%u.dat tables=scott.emp,scott.dept
        nologfile=y job_name=only_scott
    导出特定的表空间
        D:\>expdp system/oracle@oracle dumpfile=pump_dir:user_tbs_%u.dmp tablespace=users(表空间名) filesize=100m
        paraller=2 logfile=users_tbs.log job_name=exp_users_tbs
    只导出数据行
        D:\>expdp system/oracle@oracle dumpfile=pump_dir:mydb_dataonly_%u.dat filesize=100m job_name=larry
        full=y content=data_only logfile=pump_dir:mydb_exp_dataonly_log
    使用参数文件导出或导入
        编辑参数文件并保存以.par结束
        使用参数文件 D:\>expdp scott/tiger@oracle parfile=参数文件的绝对路径
    计算导出数据库所需要的空间
        D:\>expdp system/oracle@oracle full=y estimate_only=y estimate=statistics nologfile=y

        
 导入IMPDP(服务器端实用导入程序)，将备份的数据导入到整个数据库，特定的模式，特定的表或特定的表空间，也可在不同平台的数据
库之间迁移表空间 SQLFILE是其专有参数
    导入参数
        1.目录和文件相关参数
            directory：说明备份文件，日志文件和SQL文件的目录对象，若无定义目录则使用pump_dir的默认值
            dumpfile：说明备份文件名，如要导入多个备份文件，则用逗号分隔这些文件名
            parfile：说明参数文件的位置
            logfile：使用日志文件保存导入过程的信息，该参数的值为日志文件的名称（即用该日志文件记录）
            nologfile：不使用日志文件保存导入过程
            SQLfile：从备份文件中提取SQL的DDL语句，并写入到该参数设置的文件中
        2.过滤参数
            include：说明要导入的特定对象，如有多个使用逗号隔开，如只导入表，此时会导入和表有依赖关系的对象，如索引，触发器等
                include=table:"in ('emp',dept)"只导入这两个表

            table_exits_action：若导入的表已存在时，设置IMPDP的行为，其有四个值，skip表示若存在该表就跳过(默认值) 
            append将导入的数据附加到当前存在的表中，truncate,截断表并从导入数据中重新装载数据
            replace删除存在的表后重建并导入数据

            exclude：排除特定的对象
        
        3.导入作业参数
            job_name：说明导入作业名
            prallel：说明当前导入作业的线程数，默认为1
            status：监视导入作业的频率，默认值为0

        4.导入方式参数
            tables：允许导入指定的表，如有多个使用逗号隔开，会导入和表有依赖关系的对象，如索引，触发器等
            schemas：说明要导入的模式(用户所拥有的数据库对象的集合)，要使用该参数，登录数据库的用户必须拥有imp_full_database的权限
                对象：包括索引，表，视图，函数，包，过程，同义词，序列，触发器
            query：过滤要导入的表数据，此时数据泵导入作业使用外部表数据的方法访问数据
            tablespaces：说明要导入的表空间的列表，同时也导入与表空间有依赖关系的所有数据库对象
            full：导入整个数据库，该参数默认值为n

        5.重新映射参数
            在数据导入过程中，将一个数据库对象移动到另一个数据库对象，可以映射模式，映射数据文件和表空间
        映射可以理解为数据对象移动
            remap_schema：重新映射模式，将对象从一个用户/模式移动到另一个用户/模式
                D:\>impdp system/oracle@orcl dumpfile=pump_dir:shcema_scott.dmp remap_schema=scott:linzi
                将Scott用户下的所有数据库对象移动到linzi用户下

            remap_datafile：导入数据是，重新定义数据文件的名称和目录
                D:\>impdp system/oracle@orcl directory=pump_dir 
                dumpfile=backup_full.dmp 
                remap_datafile='c:\mydbf'(旧名旧目录):'d:\mydbf\newdb.dbf(新名新目录)'
            remap_tablespace：重映射表空间使得将数据对象从一个表空间移动到另一个表空间
                D:\>impdp system/oracle@orcl remap_tablespace='users(旧表空间名)':'mynewusers(新表空间名，须为已有的)' 
                directory=pump dir dumpfile=backup_full.dmp

        6.转换参数
            Transfrom：导入数据泵作业时可以选择导入某个对象的存储参数或其他属性值
            transfrom=transfrom_name:value[:object_type]
                transfrom_name：有4个选项 segment_attributes段属性包括物理属性，存储参数，表空间等参数值为Y(为包含)或N
                    storage：是否导入对象的存储属性参数值为Y或N
                    OID：是否重新分配新的OID给对象表
                    pctspace：提供一个整数值，可以增加对象的分配尺寸
                value：transfrom的前三个参数值为y
                object_type：说明对象的类型
        
        7.闪回参数
            flashback_scn：使用Oracle的闪回特性，允许导入和闪回scn接近的数据
            flashback_time:使用Oracle的闪回特性，允许导入和指定闪回时间接近的数据

        8.与可移植表空间有关的参数：Oracle的可移植表空间是数据从一个数据库移动到另一个数据库中非常容易
            transfrom_tablespace：说明要迁移的表空间列表
            transfrom_full_check：迁移表空间时，检查迁移表空间内的对象和迁移表空间外的对象是否有依赖性，该参数只有使
            用network_link参数时才有效
            transfrom_datafiles：执行表空间导入时，目标数据库使用源数据库中拷贝过来的数据文件作为可移植表空间的数据文件

        9.交互式参数
            parallel：说明当前作业的活跃worker数量
            continue_client：切换交互模式后，返回记录模式
            kill_job：分离或删除当前导入作业
            start_job：导入作业意外终止后，重启或恢复当前作业
            status：监视当前导入作业的状态，该参数为整数值，默认值为0，若设置为n则表示为n秒刷新一次导入作业状态信息
            stop_job：关闭当前执行的作业并退出客户端，若有多个则顺序退出，若stop_job=immediate则立即关闭数据泵作业

        导入数据库
            D:\>impdp(操作系统下输入) system/oracle(用户名密码)@orcl
            dumpfile=pump_dir:full_db_%u.database(备份文件)
            logfile=myfulldb.log(日志文件) parallel=3(并行度)
            job_name=my_fulldb_impdp(工作名) full=y(全部导入)
        
        导入表空间
            D:\>impdp(操作系统下输入) system/oracle(用户名密码)@orcl
            dumpfile=pump_dir:MYDB_TBS_USERSANDSYSTEM_01.DAT logfile=log
            tablespace=users(表空间名) table_exits_action=replace(如果表空间存在，则删除后重建)

        导入特定的表
            D:\>impdp(操作系统下输入) system/oracle(用户名密码)@orcl
            dumpfile=pump_dir:MYDB_TBS_USERSANDSYSTEM_01.DAT nologfile=y tables=emp(表名))
            table_exits_action=replace

        导入指定的数据库对象
            D:\>impdp(操作系统下输入) scott/trgger(用户名密码)@orcl
            dumpfile=pump_dir:MYDB_TBS_USERSANDSYSTEM_01.DAT nologfile=y
            include=table,trugger
            table_exits_action=replace


 （SQLLDR未补充完整）   
SQLLDR：导入指定文件到数据库
    1. 控制文件
        LOAD DATA（控制文件一般以此开头）
        INFIFLE （指定数据文件的位置，* 表示数据文件在控制文件中）
        INTO TABLE 表名称
        FIFLDS TERMINAIED BY "（指定分割符，如逗号等，option enclosed by '"'(指定分界符为双引号)）"
        (...) （为上述表的列名，）
        BEGINDATA（表示其后为待加载数据，仅当INFIFE）
        ....
    2. 日志文件
        默认情况下SQLLDR命令执行时会自东产生一个与控制文件同名的日志文件，扩展名为.log
    3. 错误文件
        加载数据过程中，由于数据不符合规范导致加载错误，会产生一个同名的错误文件，扩展名为.bad
    4. 废弃文件
        废弃文件记录了为被插入的数据，文件扩展名为.dsc（该文件默认不存在须在执行SQLLDR时指定废弃文件，并确实存在不符合导入逻辑的记录）



备份的概念及分类

    备份的类型
    1. 物理备份：其核心就是复制文件，将数据文件，控制文件，归档文件等Oracle启动时所需的物理文件，复制到其他路径或存储设备中
    2. 逻辑备份：其核心就是复制数据，不管数据库中具体是哪些文件存储数据，只通过Oracle的命令通过逻辑的方式直接将数据保存在其他位置
    
    备份时数据库的状态
    1. 热备份：数据库处于启动状态时创建的备份就是热备份，热备份一定是不一致备份，创建热备份时数据库一定要处于归档模式，否则创建的
    备份可能无效，热备份不需要关闭数据库
    2. 冷备份：数据库处于关闭状态时创建的备份就是冷备份，

    备份的状态 
    1. 一致性备份：备份的数据文件和控制文件具有相同的SCN称为一致性备份，数据库正常关闭，数据库未被置于打开状态或处于open read only 
    时创建的备份才是一致性备份
    2. 不一致性备份：数据库处于不一致状态时创建的备份就是不一致备份，数据库处于open read write状态或者以shutdown abort关闭时，均为
    不一致状态，创建不一致性的备份除了备份数据文件，控制文件外还需要备份归档日志文件

    备份规模
    1. 完全备份：整个数据库的备份，在归档模式下数据库正常打开或关闭状态下创建的备份都是有效的，非归档模式中只有数据库正常关闭状态下
    创建的备份才是有效备份
    2. 表空间备份：备份所有隶属于指定表空间的数据文件，当数据库处于归档模式或表空间为只读，脱机状态时创建的表空间备份才是有效备份
    3. 数据文件备份
    4. 控制文件备份
    5. 归档日志文件备份

    恢复类型
    1. 实例恢复：读取数据文件和联机重做文件，使数据文件和控制文件恢复到崩溃前的状态，由Oracle自动进行
        1.1 前滚（缓存恢复）：通过重做日志重现崩溃前对数据库进行的修改，将已提交尚未写入数据文件的数据写入数据文件中，
        1.2 回滚（事务恢复）：将为提交却写入数据文件的数据，从数据文件中撤销
    2. 介质恢复：指数据文件的修复


rman

    连接到目标数据库
    1. 选择要连接的实例
        set ORACLE_SID=oracle
        connect target 用户名/密码
    2. connect target 用户名/密码@oracle
    3. connect target /  

    一：备份


    如果数据库处于open read write状态执行备份，数据库必须置于归档模式
    host命令可以暂时退出rman的操作台返回系统的操作台，系统控制台输入exit可切换回到rman的操作台
    备份类型：
        镜像复制：创建日志文件，数据文件，控制文件等的备份，等同于复制一份
        备份集：rman创建的具有特定格式的逻辑备份对象，备份集在逻辑上由一个或多个备份片段组成，每个片段在物理上对应一个操作系
    统文件，一个备份片段中可能包含多个数据文件，控制文件或归档文件，其优势在于备份时只读取数据库中已经使用的数据块，提升备份效率

    执行方式：以backup开始
        单个执行：rman> backup database;
        批处理：rman>run{......},将多个命令放在一起组成一个命令组，若其中任何一条命令执行失败则其后的所有命令都不被执行
        运行脚本
            1.用命令行调用操作系统中的脚本 D:\> rman /@脚本名称(或者 /cmdfile=脚本名称)))
            2.在rman中执行操作系统中的脚本 rman>@脚本名称
            3.运行存储在catalog中的脚本（需首先为rman创建恢复目录） rman>run{execute script 脚本名称}

    备份整个数据库(若数据库处于open read write 状态，数据库必须置于归档模式)
        backup database;(此命令默认将备份保存至Oracle的安装目录)
        backup database format '路径'（通过format参数自定义路径和命名规则）
    查看全库备份
        list backup of database;
        
    备份表空间（只要实例处于加载状态，无论数据库是否打开都可以进行表空间的备份）
        backup tablespace 表空间名称;
        backup tablespace 表空间名称 format '路径'
    查看表空间备份
        list backup of tablespace 表空间名

    备份数据文件
        backup datafile '数据文件名称路径'/数据文件id
    查看数据文件备份
        list backup of datafile n（为数据文件id）

    备份控制文件  
        1.手动执行备份命令 backup current controlfile
        2.执行backup命令时指定include current controlfile子句 backup database include current controlfile 
            每一次备份任务的时候都会备份一次控制文件
        3.备份数据库的第一个数据文件,此时也会备份控制文件 backup datafile 1;
        4.通过configure命令将controlfile autobackup设置为on  configure controlfile autobackup on 
             每一次备份任务的时候都会备份一次控制文件
    查看控制文件备份
        list backup of controlfile 

    备份归档文件
        1. backup archivelog all;(all指备份当前所有可以访问到的归档文件)
        2. 执行backup命令时指定plus archivelog
            该语句会依次执行下列步骤
            1. 运行alter system archive log current 对当前重做日志文(redolog)件进行归档 
            2. 执行backup archivelog all命令备份所有已归档日志
            3. 对本次backup命令要备份的内容进行备份
            4. 再次运行alter system archive log current 对当前重做日志文(redolog)件进行归档 
            5. 将新产生的尚未备份的归档日志进行备份
            在backup命令后加入 delete all input 参数，会在完成备份之后自动删除已备份的归档日志，即删除上述过程中的第一次备份的文件
    查看归档文件的备份
        list backup of archivelog all;

    备份参数文件(备份控制文件时会自动备份)
        backup spfile;

    备份备份集
        backup backupset all;(备份所有备份集，该命令会直接复制当前的备份集，建立一个一模一样的备份集)

    rman常用命令
        1. show：通过show命令显示当前的配置参数 showshow all; 
        2. list：列出数据库中所有的备份信息 list backup；列出相对应的备份信息 list backup of ;列出所有无效备份list expired backup
        3. delete：删除备份记录及相应的物理文件
            删除过期备份：delete obsolete
            删除无效备份：delete expired backup 删除expired副本：delete expired copy
            删除特定备份集：delete backupset 备份集id  删除特定的备份片 delete backuppiece

    report：对当前备份信息的分析
        report need backup ：查看所有需要备份的文件
        report need backup tablespace 表名称：查看指定的表空间是否需要备份
        report obsolete ：查看过期备份

    crosscheck：用来检查备份或归档物理文件的状态，如果物理文件存在，并且控制文件或恢复目录中有匹配记录，则标记该对象状态为available(有效)
        若文件不存在，则标记该对象状态为expired（无效）
        crosscheck archivelog all 检查所有归档文件
        crosscheck backup 检查所有备份集

    change：修改备份文件或归档文件的状态，不是指物理文件而是这些文件在控制文件或恢复目录中对应记录的状态分别为available(可用),
    unavailable(不可用)
        change backup of tablespace users unavailable 修改指定表空间状态为不可用
        change archivelog logseq=n unavailable 修改指定归档文件状态为不可用
        change archivelog logseq=n delete 删除指定的归档文件


    增量备份：所有增量备份都必须创建0级备份，0级备份相当于数据库的完整备份
        创建0级的全库备份
            backup incremental level=0 database;
        为数据文件建立增量级别为1的备份
            backup incremental level=1 datafile '文件路径'
        为表空间建立增量级别为1的备份
            backup incremental level=1 tablespace 表空间名
    增量备份类型：
        differential(差异)，cumulative(累积)，这两种增量类型在创建备份集时算法是不一样的，differential为默认方式，
        backup incremental level=0 cumulative database; 用来创建cumulative类型的增量备份
            启动块修改跟踪
                alter database enable block change tracking using file'/loaction/trk_filename';
            禁用块修改跟踪
                alter database disable block chang tracking ;
            查询是否启用块修改跟踪
                select status from V$block_change_tracking;

    基于时间保存备份的策略
        configure retention policy to recovery window of n days; n为正整数；
        备份保留多少天的时间（各个数据文件必须满足 sysdate - backup checkpoint time >=n才行）
        （此方式受控制文件中control_file_record_keep_time参数的影响）
    
    基于冗余数量的备份保存策略
        如果某个数据文件的冗余备份数量超过指定的数量，rman将废除最旧的备份
        configure retention policy to redundancy n;

    不采用任何备份保留状态，需dba用户
        configure retention policy to none;

    根据备份策略维护备份集
        设置备份策略之后rman会自动判断哪些备份集或镜像复制文件不需要再保留
            report obsolete查看当前处于废弃状态的备份文件
            delete obsolete删除废弃状态的备份文件



    备份设备：rman支持两种备份设备，磁带（SBT）和磁盘（DISK）
    通道和设备之间关系密切，分配通道基于设备做分配
    
    手工分配通道：
        专有命令：allocate channel该命令只能在run块中出现，每条allocate chanel对应一条通道，通道数决定操作的并行度
        release channel 命令用来释放通道，rman会在run中任务完成之后自动释放通道
    自动分配通道
        1. configure device type sbt/disk parallelism n;
        2. configure default device type to sbt/disk;
        3. configure channel device type sbt/disk format...;
        4. configure channel n device type sbt/disk format...;

    复合备份(duplexed方式备份)
    三种方式实现
        1. backup copies 3 database;使用copies参数在备份的同时自动生成当前备份集的2份备份到默认备份目录
        2. run{set backup copies 2; backup device type disk format 'D:\backup1\%U','D:\backup2\%U' tablespace users,sales;}
            上述命令生成两份备份集分别存储到'D:\backup1','D:\backup2' 目录下
        3. 利用configure...backup copies命令指定设备类型和备份复制的数量，此命令仅适用于数据文件，归档重做日志文件和备份，并且只有在
            使用自动分配的通道时才能使用
            configure default device type to disk;
            configure datafile backup copies for deivce type disk to 2;
            configure archivelog backup copies for device type disk to 2;

    设置备份集属性
        1. 设置备份片段文件名（默认会自动生成一个唯一的名称），使用format参数
            分配通道时指定备份片段命名格式
            run {allocate channel c1 device type disk format 'D:\backup2\cc_%U';backup tablespace users;}
            执行备份命令时指定备份片段命名格式
            backup tablespace users format 'D:\backup2\cc_%U'
        
        2. 设置备份集标签（即TAG,每个备份都会有默认会自动生成，其中TAG和T是固定字符默认格式为TAGyyyymmttThhmmss,分别对应操作时间）
            backup tablespace users TAG tbs_qwer
            同时，TAG标签也可以视为备份集的别名

    创建控制文件快照，用于控制文件的读一致性
        configure snapshot contorlfile name to 'd:\backup\file.ora'

    设置备份片段，备份集大小
        分配通道时maxpiecesize参数转门指定备份片段大小
            run {allocate channel c1 device type disk maxpiecesize=10m 'D:\backup2\cc_%U';backup tablespace users; }
            备份users表空间时指定单个片段最大不超过10M；
        指定备份集的大小
            backup database maxpiecesize=10m
            指定单个备份集合大小为10m

    恢复目录（catalog）：一个专门的备份信息存储地
        优点
            1. 存储rman脚本
            2. 保留更多的历史备份信息
            3. 同时管理与备份多个目标数据库
        创建步骤
        1. 创建一个独立的表空间
            create tablespace tmantbs datafile 'D:\backup\ramts.dbf' size 10m;
        2. 创建一个独立的schema,用来记录备份信息，并授予相关权限
            grant connect,resource,recovery_catalog_owner to rmanct identified by rmanct;   
        3. 通过rman连接到新建的恢复目录
            rman catalog rmanct/rmanct
        4. 在rman中创建catalog
            create catalog tablespace rmantbs;
        使用恢复目录进行备份操作之前要在恢复目录中注册该数据库，注册命令如下
            以catalog模式连接到目标数据库和恢复目录
                rman target / catalog rmantbs/rmantbs@oracle
            注册数据库
                begsiter database 
            注销数据库
                unbegsiter database

    是否启用备份优化
        必须满足以下条件才能启用备份优化功能
        1. configure backup optimization 参数设置为on 
        2. 执行backup database或backup archivelog中带有all或like 参数
        3. 分配的通道仅使用一种设备类型，不能同时使用sbt disk 
        启用优化命令
            configure backup optimization on;

    压缩备份集
        执行备份命令时，加入 as compressed backupset选项启用压缩功能
        backup as compressed backupset tablespace system;

    加密备份集
        configure命令，设置后除非显式修改否则将持续生效，
        set encryption命令，设置后仅作用于本次会话，优先级大于configure，可将configure设置覆盖掉
        用configure命令启用/关闭加密模式
            configure encryption for database on/off ;
            指定表空间集的加密
                configure encryption for tablespace users on/off
        用set encryption 命令加密备份集
            set encryption on identified by encbak only;
            上述命令设置了一个名为encbak的密钥（即密码模式），在其后创建的备份集在进行恢复时，必须使用该密钥才能正常操作

    配置默认加密算法
        configure encryption algorithm
        通过V$rman_encryption_algorithm视图查询rman支持的加密算法
        
    rman实战
        run{
            configure retention policy to recovery window of 14 days;
            configure controlfile autobackup on;
            configure controlfile autobackup format for device type disk to 'd:\backup\%F';
            allocate channel c1 device type disk format 'd:\backup\%U';
            backup database skip inaccessible
              plus archivelog filesperset 20
              delete all input;
        release channel c1;
        }
        allocate channel for maintenance device type disk;
        crosscheck backupset;
        delete noprompt obsolete;

        backup skip 参数：
            skip inaccessible：跳过不可读的文件
            skip offline：跳过offline的数据文件
        filesperset参数：设置一个备份集中最多包含的文件
        allocate  channel for maintenance 专门为change,delete,crosscheck分配通道，不能包含在run块中

    将某条更改过的配置在置为初始值
        configure retention policy clear;


    set进行会话级配置

        常在run块外运行的命令
            set echo on/off 打开或关闭回显
        指定客户端信息
            set command id to 'oracle'
        指定数据库的数据库标识符，只能在nomount模式下执行
            set dbid n（n为10为长度数字组成的字符串） 

        常在run块内运行的命令
            给数据文件指定新的路径和名称
                RUN {allocate channel c1 device type disk;
                    set newname for datafile 4 to 'd:\backup\cc.dbf'}
            设置恢复到的时间点或scn
                RUN {allocate channel c1 device type disk;
                    set until time "to_data('2010-10-10 10:10:10','yyyy-mm-dd hh24:mm:ss')"}
            定义备份片段的冗余数
                RUN {allocate channel c1 device type disk;
                    set backup copies 3;}


    RMAN相关的动态视图
        1. V$ARCHIVED_LOG 
        2. V$BACKUP_SET
        3. V$BACKUP_PIECE
            关联视图 V$BACKUP_PIIECE_DETAILS
        4. V$BACKUP_CORRUPTION
            关联视图 V$BACKUP_SET_DETAILS,V$BACKUP_SET_SUMMARY
        5. V$SESSION
        6. V$PROCESS
        7. V$SESSION_LONGOPS
        8. V$BACKUP_CORRUPTION


    删除备份

        1. 删除指定的备份集
            delete backupset bs关键字序号
        2. 删除过期备份(根据备份冗余策略确定备份是否过期)
            delete obsolete 
        3. 删除无效备份
            delete expired backup;
        4. 删除expired副本（未操作）
            delete expired copy;
        5. 删除特定备份片断（未操作）
            delete backuppiece '路径'
        6. 删除所有备份集
            delete backup;
        7. 删除特定映像副本（位操作）
            delete datafile copy '路径'
        8. 删除所有映像（未操作）
            delete copy;
        9. 在备份后删除输入对象
            backup archivelog all delete input 
            delete backupset 22 format='路径' delete input

        
  二：恢复
    
    1.完全介质恢复：数据库只剩下控制文件和spfile，但是创建过全库备份，且执行过备份操作后所有的归档文件和重做日志文件还在，此时
      可以将数据库恢复到崩溃前的状态此恢复方法称为完全介质恢复
    
    执行完全介质参数有以下三个步骤(归档模式下进行)
        1.启动数据库到加载状态
            startup mount;
        2.执行恢复操作
            1). restore database;
            2). recover database delete archivelogs skip tablespace temp;
            delete archivelogs：表示rman在完成恢复后自动删除在恢复过程中产生的归档日志文件
            skip tablespace：跳过指定的表空间
            maxsize：指定恢复过程中自动产生的归档文件最大可占空间若超过该值则该部分文件被应用后马上删除
        3. alter database open;
    
    2. 恢复表空间（表空间必须处于脱机状态）
        SQL 'ALTER TABLESPACE XXX OFFLINE IMMEDIATE';（将表空间设为脱机）
        RESTORE TABLESPACE XXX;
        RECOVER TABLESPACE XXX;
        SQL 'ALTER TABLESPACE XXX ONLINE';（将表空间设为连机）
    
    3. 恢复数据文件（数据文件必须处于脱机状态） 
        SQL 'ALTER DATABASE DATAFILE 文件序号或路径 OFFLINE'
        RESTORE DATAFILE 文件序号或路径;
        RECOVER DATAFILE 文件序号或路径;
        SQL 'ALTER DATABASE DATAFILE 文件序号或路径 ONLINE';
        若由于磁盘损坏导致数据文件无法访问，须在执行restore之前给数据文件指定新的路径
        run{
            set newname for datafile 3 to 'f:\oracle\oradata\newdb\wer.dbf';
            restore datafile 3;
            switch datafile 3;
            recover datafile 3;
        }

    4. 恢复归档日志文件
        1). restore archivelog sequence between 20 and 30;（恢复序列号为20到30之间的归档文件）
        2). run{
            set archivelog destination to 'f:\oracle\backup';
            restore archivelog sequence between 20 and 30; 
        }将恢复出来的归档日志文件放在其他路径下

    5. 恢复控制文件
        1). 从自动备份中恢复
            启动数据库之前必须设置DBID（自动备份时文件名中包含DBID,V$DATABASE查询该视图可以获得）
            set DBID=XXXXXXX;
            启动数据库
            startup nomount;
            从自动备份中恢复控制文件
                恢复至默认路径下
                restore controlfile from autobackup;
                恢复到指定的路径下
                restore controlfile to 'f:\oracle\newdb\control01.ct1' from autobackup;
        2). 从备份集中恢复
            启动数据库之前必须设置DBID（自动备份时文件名中包含DBID,V$DATABASE查询该视图可以获得）
            set DBID=XXXXXXX;
            启动数据库
            startup nomount;
            指定控制文件所在备份片段的详细路径
            restore controlfile from 'f:\oracle\backup\shfie';
    
    6. 恢复spfile
        启动数据库之前必须设置DBID（自动备份时文件名中包含DBID,V$DATABASE查询该视图可以获得）
            set DBID=XXXXXXX;
            启动数据库
            startup nomount;
            恢复至默认路径下
                restore spfile from autobackup;
            恢复到指定路径
                restore spfile to 'd:\oracle\tmp\spfile.ora' from autobackup;
            从指定的备份文件恢复到指定的路径
                 restore spfile to 'd:\oracle\tmp\spfile.ora' from 'f:\oracle\backup\shfie';
    


flashblack：闪回，回滚，回退
    flashback query：恢复记录
        获取scn
        select current_scn * from V$database;

        as of timestamp：基于时间
            select * from test as of timestamp sysdate-5/1440;查看5分钟之前test表的状态
        as of scn：基于scn 
            select * from test as of scn 1249033; 查看scn号为1249033时test表的状态
        insert into test select * from test as of timestamp sysdate-5/1440;将test表回退到5分钟之前的状态
        insert into test select * from test as of scn 149033; 将test表回退到scn号为149033时的状态

        scn和sysdate的转换
        timestamp_to_scn：时间转换为scn
            select timestamp_to_scn(sysdate) from dual;
        scn_to_timestamp：scn转化为时间
            select scn_to_timestamp(149033) from dual;
            select to_char(scn_to_timestamp(149033),'yyyy-mm-dd') from dual;转换为指定的格式
    
    注意事项
        undo表空间中相关的数据过期或被覆盖后，将无法闪回
        设置alter tablespace undotbs1(undo表空间名称) retention guarantee;设置之后在有效期内不会覆盖undo表空间内未过期的数据
        对表做过DDL操作后，包括drop/modify列，move表，drop分区等操作都会使得undo表空间中的闪回数据失效

    flashback table和recycle bin 
        flashback table：恢复表
        recycle bin：被删除的表并非真正删除，而是先通过修改数据字典的方式，将其改名并放入recycle bin中；
        flashback table和recyclebin组合使用
        练习一：
            1.drop table test1;删除表test1
            2.select object_name,original_name from recyclebin;在recyclebin中查询删除记录
            3.flashback table test1 to before drop; 使用flashback table将test1表闪回到删除之前
            4.select index_name from user_indexes where table_name='test1'; 查看test1的索引信息有没有恢复，若没有执行下一步
            5.alter index "第四步中查到的索引名称" rename to i_test1;
            第4，5步有待论证
        练习二：
            1.drop table test1;
            2.create table test1 as select * from test2; 创建一个新的表test1
            3.flashback table test1 to before drop rename to test1_old; 因为有了新的test1表，所以闪回时要给表重新命名
        练习三：
            1.drop table test1;
            2.create table test1 as select * from test2;
            3.drop table test1;
            4.select object_name,original_name,droptime from recyclebin;
            5.flashback table test1 to before drop;
            6.select object_name,original_name,droptime from recyclebin;
            删除同名表多次，后删除的将会被先恢复
            7.flashback table "recyclebin中表的索引值" to before drop; 恢复指定的表

    从undo表空间内闪回(被操作的表需要开启行移动功能row movement)
    flashback table tbname to scn/timestamp
        查询是否启用行移动功能
            select row_movement from user_tables where table_name='test1';
        行移动功能启动
            alter table test1 enable row movement;
        行移动功能禁用
            alter table test1 disable row movement;

        注意事项一：基于flashback table恢复
            1.使用flashback table功能，被闪回的表必须启用row movement功能
            2.DDL操作的影响
            3.默认情况下执行恢复时会自动disable掉与其操作表相关的triggers，如需更改，则在执行恢复时附加enable trigger子句
            4.索引会自动维护，但统计信息不会恢复到指定的时间点
            5.不支持恢复，聚簇表，物化视图，高级队列表，系统表，远程表，对象表，嵌套表以及表分区，子分区；
        
        注意事项二：基于recyclebin的表恢复
            1.若被操作表有主键约束，则恢复后该约束是disable状态，需要手动处理
            2.不能恢复字典管理表空间中被删除的表
            3.若对表的索引，约束有相关的规范，则恢复后需要手动更改
            4.不能恢复依赖于该表的物化视图，需要手动重建
            5.当数据文件空间不足时Oracle会首先清理被删除的表的索引，所以缺少索引是正常的
            6.支持同时操作多个表，要么全成功，要么全失败
            7.只能恢复drop命令删除的表

    recycle bin：回收站

        查看recyclebin中的对象
            select * from recyclebin;
            show recyclebin;
        recyclebin中的对象可以被访问但不允许被修改查询时要指定对象在recyclebin中的对象名
            select * from "BIN$9mpcXARaS3uHEFqUjjDSvA==$0";
        同时支持flashback qurery功能查询
            select * from "BIN$9mpcXARaS3uHEFqUjjDSvA==$0" as of scn=xxx/timestamp sysdate-5;
        禁用和启用recyclebin 功能
            针对当前会话禁用
            alter session set recyclebin=off;
            针对整个实例
            alter system set recyclebin=off;或修改pfile中recyclebin中的参数值
        直接删除跳过recyclebin
            drop table test1 purge;
                













